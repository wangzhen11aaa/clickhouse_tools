2021-04-11 14:18:48,368 clickhouse_migrate:115 [INFO]: do create databse cloudatlas
2021-04-11 14:18:48,368 clickhouse_migrate:102 [INFO]: Create database cloudatlas, Ready Go!
2021-04-11 14:18:48,617 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database cloudatlas already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:18:48,618 clickhouse_migrate:115 [INFO]: do create databse csp
2021-04-11 14:18:48,618 clickhouse_migrate:102 [INFO]: Create database csp, Ready Go!
2021-04-11 14:18:48,855 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database csp already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:18:48,855 clickhouse_migrate:115 [INFO]: do create databse customer_center
2021-04-11 14:18:48,855 clickhouse_migrate:102 [INFO]: Create database customer_center, Ready Go!
2021-04-11 14:18:49,108 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/customer_center (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:18:49,108 clickhouse_migrate:115 [INFO]: do create databse default
2021-04-11 14:18:49,109 clickhouse_migrate:102 [INFO]: Create database default, Ready Go!
2021-04-11 14:18:49,346 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database default already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:18:49,347 clickhouse_migrate:115 [INFO]: do create databse dim
2021-04-11 14:18:49,347 clickhouse_migrate:102 [INFO]: Create database dim, Ready Go!
2021-04-11 14:18:49,598 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/dim (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:18:49,598 clickhouse_migrate:115 [INFO]: do create databse hrdb
2021-04-11 14:18:49,598 clickhouse_migrate:102 [INFO]: Create database hrdb, Ready Go!
2021-04-11 14:18:49,831 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/hrdb (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:18:49,832 clickhouse_migrate:115 [INFO]: do create databse msc
2021-04-11 14:18:49,832 clickhouse_migrate:102 [INFO]: Create database msc, Ready Go!
2021-04-11 14:18:50,069 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database msc already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:18:50,069 clickhouse_migrate:115 [INFO]: do create databse system
2021-04-11 14:18:50,069 clickhouse_migrate:102 [INFO]: Create database system, Ready Go!
2021-04-11 14:18:50,310 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database system already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:18:50,310 clickhouse_migrate:115 [INFO]: do create databse test
2021-04-11 14:18:50,310 clickhouse_migrate:102 [INFO]: Create database test, Ready Go!
2021-04-11 14:18:50,546 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database test already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:18:50,703 clickhouse_migrate:127 [INFO]: local tables [[]] in (u'cloudatlas',)
2021-04-11 14:18:50,704 clickhouse_migrate:97 [INFO]: Fetch table schema, (u'cloudatlas',).[]
2021-04-11 14:23:29,652 clickhouse_migrate:115 [INFO]: do create databse cloudatlas
2021-04-11 14:23:29,654 clickhouse_migrate:102 [INFO]: Create database cloudatlas, Ready Go!
2021-04-11 14:23:29,985 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database cloudatlas already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:23:29,985 clickhouse_migrate:115 [INFO]: do create databse csp
2021-04-11 14:23:29,985 clickhouse_migrate:102 [INFO]: Create database csp, Ready Go!
2021-04-11 14:23:30,225 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database csp already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:23:30,225 clickhouse_migrate:115 [INFO]: do create databse customer_center
2021-04-11 14:23:30,225 clickhouse_migrate:102 [INFO]: Create database customer_center, Ready Go!
2021-04-11 14:23:30,468 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/customer_center (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:23:30,468 clickhouse_migrate:115 [INFO]: do create databse default
2021-04-11 14:23:30,469 clickhouse_migrate:102 [INFO]: Create database default, Ready Go!
2021-04-11 14:23:30,706 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database default already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:23:30,707 clickhouse_migrate:115 [INFO]: do create databse dim
2021-04-11 14:23:30,707 clickhouse_migrate:102 [INFO]: Create database dim, Ready Go!
2021-04-11 14:23:30,943 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/dim (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:23:30,943 clickhouse_migrate:115 [INFO]: do create databse hrdb
2021-04-11 14:23:30,943 clickhouse_migrate:102 [INFO]: Create database hrdb, Ready Go!
2021-04-11 14:23:31,141 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev06:9002]: Code: 82, e.displayText() = DB::Exception: Database hrdb already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:23:31,141 clickhouse_migrate:115 [INFO]: do create databse msc
2021-04-11 14:23:31,142 clickhouse_migrate:102 [INFO]: Create database msc, Ready Go!
2021-04-11 14:23:31,382 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database msc already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:23:31,383 clickhouse_migrate:115 [INFO]: do create databse system
2021-04-11 14:23:31,383 clickhouse_migrate:102 [INFO]: Create database system, Ready Go!
2021-04-11 14:23:31,623 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database system already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:23:31,623 clickhouse_migrate:115 [INFO]: do create databse test
2021-04-11 14:23:31,623 clickhouse_migrate:102 [INFO]: Create database test, Ready Go!
2021-04-11 14:23:31,865 clickhouse_migrate:118 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database test already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:23:32,024 clickhouse_migrate:127 [INFO]: local tables [[]] in (u'cloudatlas',)
2021-04-11 14:23:32,024 clickhouse_migrate:97 [INFO]: Fetch table schema, (u'cloudatlas',).[]
2021-04-11 14:24:08,057 clickhouse_migrate:116 [INFO]: do create databse cloudatlas
2021-04-11 14:24:08,057 clickhouse_migrate:103 [INFO]: Create database cloudatlas, Ready Go!
2021-04-11 14:24:08,311 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database cloudatlas already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:08,312 clickhouse_migrate:116 [INFO]: do create databse csp
2021-04-11 14:24:08,312 clickhouse_migrate:103 [INFO]: Create database csp, Ready Go!
2021-04-11 14:24:08,553 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database csp already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:08,553 clickhouse_migrate:116 [INFO]: do create databse customer_center
2021-04-11 14:24:08,553 clickhouse_migrate:103 [INFO]: Create database customer_center, Ready Go!
2021-04-11 14:24:08,755 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/customer_center (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:08,755 clickhouse_migrate:116 [INFO]: do create databse default
2021-04-11 14:24:08,755 clickhouse_migrate:103 [INFO]: Create database default, Ready Go!
2021-04-11 14:24:09,001 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database default already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:09,001 clickhouse_migrate:116 [INFO]: do create databse dim
2021-04-11 14:24:09,001 clickhouse_migrate:103 [INFO]: Create database dim, Ready Go!
2021-04-11 14:24:09,242 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/dim (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:09,242 clickhouse_migrate:116 [INFO]: do create databse hrdb
2021-04-11 14:24:09,242 clickhouse_migrate:103 [INFO]: Create database hrdb, Ready Go!
2021-04-11 14:24:09,479 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/hrdb (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:09,479 clickhouse_migrate:116 [INFO]: do create databse msc
2021-04-11 14:24:09,479 clickhouse_migrate:103 [INFO]: Create database msc, Ready Go!
2021-04-11 14:24:09,717 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database msc already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:09,717 clickhouse_migrate:116 [INFO]: do create databse system
2021-04-11 14:24:09,717 clickhouse_migrate:103 [INFO]: Create database system, Ready Go!
2021-04-11 14:24:09,955 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database system already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:09,955 clickhouse_migrate:116 [INFO]: do create databse test
2021-04-11 14:24:09,955 clickhouse_migrate:103 [INFO]: Create database test, Ready Go!
2021-04-11 14:24:10,192 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database test already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:10,349 clickhouse_migrate:128 [INFO]: local tables [[]] in (u'cloudatlas',)
2021-04-11 14:24:10,350 clickhouse_migrate:98 [INFO]: Fetch table schema, (u'cloudatlas',).[]
2021-04-11 14:24:50,299 clickhouse_migrate:116 [INFO]: do create databse cloudatlas
2021-04-11 14:24:50,300 clickhouse_migrate:103 [INFO]: Create database cloudatlas, Ready Go!
2021-04-11 14:24:50,544 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database cloudatlas already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:50,544 clickhouse_migrate:116 [INFO]: do create databse csp
2021-04-11 14:24:50,544 clickhouse_migrate:103 [INFO]: Create database csp, Ready Go!
2021-04-11 14:24:50,779 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database csp already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:50,779 clickhouse_migrate:116 [INFO]: do create databse customer_center
2021-04-11 14:24:50,779 clickhouse_migrate:103 [INFO]: Create database customer_center, Ready Go!
2021-04-11 14:24:51,016 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/customer_center (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:51,017 clickhouse_migrate:116 [INFO]: do create databse default
2021-04-11 14:24:51,017 clickhouse_migrate:103 [INFO]: Create database default, Ready Go!
2021-04-11 14:24:51,257 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database default already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:51,258 clickhouse_migrate:116 [INFO]: do create databse dim
2021-04-11 14:24:51,258 clickhouse_migrate:103 [INFO]: Create database dim, Ready Go!
2021-04-11 14:24:51,496 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/dim (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:51,496 clickhouse_migrate:116 [INFO]: do create databse hrdb
2021-04-11 14:24:51,497 clickhouse_migrate:103 [INFO]: Create database hrdb, Ready Go!
2021-04-11 14:24:51,735 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/hrdb (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:51,735 clickhouse_migrate:116 [INFO]: do create databse msc
2021-04-11 14:24:51,735 clickhouse_migrate:103 [INFO]: Create database msc, Ready Go!
2021-04-11 14:24:51,976 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database msc already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:51,976 clickhouse_migrate:116 [INFO]: do create databse system
2021-04-11 14:24:51,976 clickhouse_migrate:103 [INFO]: Create database system, Ready Go!
2021-04-11 14:24:52,213 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database system already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:52,213 clickhouse_migrate:116 [INFO]: do create databse test
2021-04-11 14:24:52,213 clickhouse_migrate:103 [INFO]: Create database test, Ready Go!
2021-04-11 14:24:52,449 clickhouse_migrate:119 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database test already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:24:52,607 clickhouse_migrate:128 [INFO]: local tables [[u'cloudatlas_user_group_local', u'cloudatlas_user_local']] in (u'cloudatlas',)
2021-04-11 14:24:52,607 clickhouse_migrate:98 [INFO]: Fetch table schema, (u'cloudatlas',).[u'cloudatlas_user_group_local', u'cloudatlas_user_local']
2021-04-11 14:26:15,507 clickhouse_migrate:117 [INFO]: do create databse cloudatlas
2021-04-11 14:26:15,507 clickhouse_migrate:104 [INFO]: Create database cloudatlas, Ready Go!
2021-04-11 14:26:15,761 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database cloudatlas already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:15,761 clickhouse_migrate:117 [INFO]: do create databse csp
2021-04-11 14:26:15,761 clickhouse_migrate:104 [INFO]: Create database csp, Ready Go!
2021-04-11 14:26:16,009 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database csp already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:16,009 clickhouse_migrate:117 [INFO]: do create databse customer_center
2021-04-11 14:26:16,009 clickhouse_migrate:104 [INFO]: Create database customer_center, Ready Go!
2021-04-11 14:26:16,205 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev06:9002]: Code: 82, e.displayText() = DB::Exception: Database customer_center already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:16,205 clickhouse_migrate:117 [INFO]: do create databse default
2021-04-11 14:26:16,205 clickhouse_migrate:104 [INFO]: Create database default, Ready Go!
2021-04-11 14:26:16,445 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database default already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:16,446 clickhouse_migrate:117 [INFO]: do create databse dim
2021-04-11 14:26:16,446 clickhouse_migrate:104 [INFO]: Create database dim, Ready Go!
2021-04-11 14:26:16,699 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/dim (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:16,699 clickhouse_migrate:117 [INFO]: do create databse hrdb
2021-04-11 14:26:16,699 clickhouse_migrate:104 [INFO]: Create database hrdb, Ready Go!
2021-04-11 14:26:16,939 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/hrdb (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:16,939 clickhouse_migrate:117 [INFO]: do create databse msc
2021-04-11 14:26:16,939 clickhouse_migrate:104 [INFO]: Create database msc, Ready Go!
2021-04-11 14:26:17,178 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database msc already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:17,178 clickhouse_migrate:117 [INFO]: do create databse system
2021-04-11 14:26:17,178 clickhouse_migrate:104 [INFO]: Create database system, Ready Go!
2021-04-11 14:26:17,415 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database system already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:17,416 clickhouse_migrate:117 [INFO]: do create databse test
2021-04-11 14:26:17,416 clickhouse_migrate:104 [INFO]: Create database test, Ready Go!
2021-04-11 14:26:17,653 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database test already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:40,632 clickhouse_migrate:117 [INFO]: do create databse cloudatlas
2021-04-11 14:26:40,633 clickhouse_migrate:104 [INFO]: Create database cloudatlas, Ready Go!
2021-04-11 14:26:40,890 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database cloudatlas already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:40,890 clickhouse_migrate:117 [INFO]: do create databse csp
2021-04-11 14:26:40,890 clickhouse_migrate:104 [INFO]: Create database csp, Ready Go!
2021-04-11 14:26:41,148 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database csp already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:41,148 clickhouse_migrate:117 [INFO]: do create databse customer_center
2021-04-11 14:26:41,148 clickhouse_migrate:104 [INFO]: Create database customer_center, Ready Go!
2021-04-11 14:26:41,399 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/customer_center (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:41,400 clickhouse_migrate:117 [INFO]: do create databse default
2021-04-11 14:26:41,400 clickhouse_migrate:104 [INFO]: Create database default, Ready Go!
2021-04-11 14:26:41,638 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database default already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:41,638 clickhouse_migrate:117 [INFO]: do create databse dim
2021-04-11 14:26:41,638 clickhouse_migrate:104 [INFO]: Create database dim, Ready Go!
2021-04-11 14:26:41,879 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/dim (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:41,879 clickhouse_migrate:117 [INFO]: do create databse hrdb
2021-04-11 14:26:41,879 clickhouse_migrate:104 [INFO]: Create database hrdb, Ready Go!
2021-04-11 14:26:42,120 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/hrdb (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:42,121 clickhouse_migrate:117 [INFO]: do create databse msc
2021-04-11 14:26:42,121 clickhouse_migrate:104 [INFO]: Create database msc, Ready Go!
2021-04-11 14:26:42,362 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database msc already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:42,362 clickhouse_migrate:117 [INFO]: do create databse system
2021-04-11 14:26:42,362 clickhouse_migrate:104 [INFO]: Create database system, Ready Go!
2021-04-11 14:26:42,604 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database system already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:42,605 clickhouse_migrate:117 [INFO]: do create databse test
2021-04-11 14:26:42,605 clickhouse_migrate:104 [INFO]: Create database test, Ready Go!
2021-04-11 14:26:42,847 clickhouse_migrate:120 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database test already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:26:43,005 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : [u'cloudatlas_user', u'cloudatlas_user_group', u'cloudatlas_user_group_local', u'cloudatlas_user_local', u'dim_sku', u'trace_events']
2021-04-11 14:26:43,005 clickhouse_migrate:129 [INFO]: local tables [[u'cloudatlas_user_group_local', u'cloudatlas_user_local']] in (u'cloudatlas',)
2021-04-11 14:26:43,005 clickhouse_migrate:99 [INFO]: Fetch table schema, (u'cloudatlas',).[u'cloudatlas_user_group_local', u'cloudatlas_user_local']
2021-04-11 14:28:14,433 clickhouse_migrate:119 [INFO]: do create databse cloudatlas
2021-04-11 14:28:14,433 clickhouse_migrate:106 [INFO]: Create database cloudatlas, Ready Go!
2021-04-11 14:28:14,696 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database cloudatlas already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:14,696 clickhouse_migrate:119 [INFO]: do create databse csp
2021-04-11 14:28:14,696 clickhouse_migrate:106 [INFO]: Create database csp, Ready Go!
2021-04-11 14:28:14,935 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database csp already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:14,935 clickhouse_migrate:119 [INFO]: do create databse customer_center
2021-04-11 14:28:14,935 clickhouse_migrate:106 [INFO]: Create database customer_center, Ready Go!
2021-04-11 14:28:15,180 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/customer_center (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:15,180 clickhouse_migrate:119 [INFO]: do create databse default
2021-04-11 14:28:15,180 clickhouse_migrate:106 [INFO]: Create database default, Ready Go!
2021-04-11 14:28:15,423 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database default already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:15,424 clickhouse_migrate:119 [INFO]: do create databse dim
2021-04-11 14:28:15,424 clickhouse_migrate:106 [INFO]: Create database dim, Ready Go!
2021-04-11 14:28:15,670 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/dim (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:15,670 clickhouse_migrate:119 [INFO]: do create databse hrdb
2021-04-11 14:28:15,670 clickhouse_migrate:106 [INFO]: Create database hrdb, Ready Go!
2021-04-11 14:28:15,910 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/hrdb (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:15,910 clickhouse_migrate:119 [INFO]: do create databse msc
2021-04-11 14:28:15,911 clickhouse_migrate:106 [INFO]: Create database msc, Ready Go!
2021-04-11 14:28:16,148 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database msc already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:16,149 clickhouse_migrate:119 [INFO]: do create databse system
2021-04-11 14:28:16,149 clickhouse_migrate:106 [INFO]: Create database system, Ready Go!
2021-04-11 14:28:16,390 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database system already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:16,391 clickhouse_migrate:119 [INFO]: do create databse test
2021-04-11 14:28:16,391 clickhouse_migrate:106 [INFO]: Create database test, Ready Go!
2021-04-11 14:28:16,633 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database test already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:16,789 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : [u'cloudatlas_user', u'cloudatlas_user_group', u'cloudatlas_user_group_local', u'cloudatlas_user_local', u'dim_sku', u'trace_events']
2021-04-11 14:28:16,789 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : [[u'cloudatlas_user_group_local', u'cloudatlas_user_local']]
2021-04-11 14:28:16,790 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : [[u'cloudatlas_user', u'cloudatlas_user_group', u'dim_sku', u'trace_events']]
2021-04-11 14:28:16,790 clickhouse_migrate:131 [INFO]: local tables [[u'cloudatlas_user_group_local', u'cloudatlas_user_local']] in (u'cloudatlas',)
2021-04-11 14:28:16,790 clickhouse_migrate:101 [INFO]: Fetch table schema, (u'cloudatlas',).[u'cloudatlas_user_group_local', u'cloudatlas_user_local']
2021-04-11 14:28:36,731 clickhouse_migrate:119 [INFO]: do create databse cloudatlas
2021-04-11 14:28:36,732 clickhouse_migrate:106 [INFO]: Create database cloudatlas, Ready Go!
2021-04-11 14:28:36,985 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database cloudatlas already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:36,985 clickhouse_migrate:119 [INFO]: do create databse csp
2021-04-11 14:28:36,985 clickhouse_migrate:106 [INFO]: Create database csp, Ready Go!
2021-04-11 14:28:37,236 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database csp already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:37,237 clickhouse_migrate:119 [INFO]: do create databse customer_center
2021-04-11 14:28:37,237 clickhouse_migrate:106 [INFO]: Create database customer_center, Ready Go!
2021-04-11 14:28:37,472 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/customer_center (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:37,473 clickhouse_migrate:119 [INFO]: do create databse default
2021-04-11 14:28:37,473 clickhouse_migrate:106 [INFO]: Create database default, Ready Go!
2021-04-11 14:28:37,709 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database default already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:37,709 clickhouse_migrate:119 [INFO]: do create databse dim
2021-04-11 14:28:37,709 clickhouse_migrate:106 [INFO]: Create database dim, Ready Go!
2021-04-11 14:28:37,946 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/dim (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:37,946 clickhouse_migrate:119 [INFO]: do create databse hrdb
2021-04-11 14:28:37,946 clickhouse_migrate:106 [INFO]: Create database hrdb, Ready Go!
2021-04-11 14:28:38,185 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/hrdb (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:38,185 clickhouse_migrate:119 [INFO]: do create databse msc
2021-04-11 14:28:38,186 clickhouse_migrate:106 [INFO]: Create database msc, Ready Go!
2021-04-11 14:28:38,431 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database msc already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:38,431 clickhouse_migrate:119 [INFO]: do create databse system
2021-04-11 14:28:38,431 clickhouse_migrate:106 [INFO]: Create database system, Ready Go!
2021-04-11 14:28:38,668 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database system already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:38,668 clickhouse_migrate:119 [INFO]: do create databse test
2021-04-11 14:28:38,668 clickhouse_migrate:106 [INFO]: Create database test, Ready Go!
2021-04-11 14:28:38,905 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database test already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:28:39,063 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : [u'cloudatlas_user', u'cloudatlas_user_group', u'cloudatlas_user_group_local', u'cloudatlas_user_local', u'dim_sku', u'trace_events']
2021-04-11 14:28:39,063 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : [u'cloudatlas_user_group_local', u'cloudatlas_user_local']
2021-04-11 14:28:39,063 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : [u'cloudatlas_user', u'cloudatlas_user_group', u'dim_sku', u'trace_events']
2021-04-11 14:28:39,064 clickhouse_migrate:131 [INFO]: local tables [u'cloudatlas_user_group_local', u'cloudatlas_user_local'] in (u'cloudatlas',)
2021-04-11 14:28:39,064 clickhouse_migrate:101 [INFO]: Fetch table schema, (u'cloudatlas',).cloudatlas_user_group_local
2021-04-11 14:30:00,100 clickhouse_migrate:119 [INFO]: do create databse cloudatlas
2021-04-11 14:30:00,100 clickhouse_migrate:106 [INFO]: Create database cloudatlas, Ready Go!
2021-04-11 14:30:00,365 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database cloudatlas already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:00,366 clickhouse_migrate:119 [INFO]: do create databse csp
2021-04-11 14:30:00,366 clickhouse_migrate:106 [INFO]: Create database csp, Ready Go!
2021-04-11 14:30:00,604 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database csp already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:00,604 clickhouse_migrate:119 [INFO]: do create databse customer_center
2021-04-11 14:30:00,604 clickhouse_migrate:106 [INFO]: Create database customer_center, Ready Go!
2021-04-11 14:30:00,862 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/customer_center (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:00,862 clickhouse_migrate:119 [INFO]: do create databse default
2021-04-11 14:30:00,862 clickhouse_migrate:106 [INFO]: Create database default, Ready Go!
2021-04-11 14:30:01,116 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database default already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:01,116 clickhouse_migrate:119 [INFO]: do create databse dim
2021-04-11 14:30:01,117 clickhouse_migrate:106 [INFO]: Create database dim, Ready Go!
2021-04-11 14:30:01,362 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/dim (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:01,362 clickhouse_migrate:119 [INFO]: do create databse hrdb
2021-04-11 14:30:01,362 clickhouse_migrate:106 [INFO]: Create database hrdb, Ready Go!
2021-04-11 14:30:01,609 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/hrdb (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:01,609 clickhouse_migrate:119 [INFO]: do create databse msc
2021-04-11 14:30:01,609 clickhouse_migrate:106 [INFO]: Create database msc, Ready Go!
2021-04-11 14:30:01,847 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database msc already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:01,847 clickhouse_migrate:119 [INFO]: do create databse system
2021-04-11 14:30:01,848 clickhouse_migrate:106 [INFO]: Create database system, Ready Go!
2021-04-11 14:30:02,089 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database system already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:02,090 clickhouse_migrate:119 [INFO]: do create databse test
2021-04-11 14:30:02,090 clickhouse_migrate:106 [INFO]: Create database test, Ready Go!
2021-04-11 14:30:02,343 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database test already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:02,502 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : [u'cloudatlas_user', u'cloudatlas_user_group', u'cloudatlas_user_group_local', u'cloudatlas_user_local', u'dim_sku', u'trace_events']
2021-04-11 14:30:02,503 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : [u'cloudatlas_user_group_local', u'cloudatlas_user_local']
2021-04-11 14:30:02,503 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : [u'cloudatlas_user', u'cloudatlas_user_group', u'dim_sku', u'trace_events']
2021-04-11 14:30:02,503 clickhouse_migrate:131 [INFO]: local tables [u'cloudatlas_user_group_local', u'cloudatlas_user_local'] in cloudatlas
2021-04-11 14:30:02,503 clickhouse_migrate:101 [INFO]: Fetch table schema, cloudatlas.cloudatlas_user_group_local
2021-04-11 14:30:02,581 clickhouse_migrate:136 [INFO]: Table's schema CREATE TABLE cloudatlas.cloudatlas_user_group_local (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = MergeTree() PARTITION BY source_type ORDER BY (group_id, uid) SETTINGS index_granularity = 8192
2021-04-11 14:30:02,582 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE cloudatlas.cloudatlas_user_group_local (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = MergeTree() PARTITION BY source_type ORDER BY (group_id, uid) SETTINGS index_granularity = 8192 
2021-04-11 14:30:02,582 clickhouse_migrate:37 [INFO]: database : cloudatlas
2021-04-11 14:30:02,582 clickhouse_migrate:38 [INFO]: table : cloudatlas_user_group_local
2021-04-11 14:30:02,582 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_group_local on cluster replicated_stock (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = MergeTree() PARTITION BY source_type ORDER BY (group_id, uid) SETTINGS index_granularity = 8192 is bad
2021-04-11 14:30:02,582 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_group_local on cluster replicated_stock (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = MergeTree() PARTITION BY source_type ORDER BY (group_id, uid) SETTINGS index_granularity = 8192
2021-04-11 14:30:02,582 clickhouse_migrate:139 [INFO]: Will construct table on target cluster
2021-04-11 14:30:02,583 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_group_local on cluster replicated_stock (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = MergeTree() PARTITION BY source_type ORDER BY (group_id, uid) SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:30:02,828 clickhouse_migrate:101 [INFO]: Fetch table schema, cloudatlas.cloudatlas_user_local
2021-04-11 14:30:02,908 clickhouse_migrate:136 [INFO]: Table's schema CREATE TABLE cloudatlas.cloudatlas_user_local (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = MergeTree(dt, company_id, 8192)
2021-04-11 14:30:02,908 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE cloudatlas.cloudatlas_user_local (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = MergeTree(dt, company_id, 8192) 
2021-04-11 14:30:02,909 clickhouse_migrate:37 [INFO]: database : cloudatlas
2021-04-11 14:30:02,909 clickhouse_migrate:38 [INFO]: table : cloudatlas_user_local
2021-04-11 14:30:02,909 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_local on cluster replicated_stock (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = MergeTree(dt, company_id, 8192) is bad
2021-04-11 14:30:02,909 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_local on cluster replicated_stock (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = MergeTree(dt, company_id, 8192)
2021-04-11 14:30:02,909 clickhouse_migrate:139 [INFO]: Will construct table on target cluster
2021-04-11 14:30:02,909 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_local on cluster replicated_stock (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = MergeTree(dt, company_id, 8192)>, Ready Go !
2021-04-11 14:30:03,126 clickhouse_migrate:144 [INFO]: Will Create distributed Tables in cloudatlas
2021-04-11 14:30:03,126 clickhouse_migrate:149 [INFO]: distributed tables [u'cloudatlas_user', u'cloudatlas_user_group', u'dim_sku', u'trace_events'] in cloudatlas
2021-04-11 14:30:03,127 clickhouse_migrate:101 [INFO]: Fetch table schema, cloudatlas.cloudatlas_user
2021-04-11 14:30:03,280 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE cloudatlas.cloudatlas_user (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_local, company_id)
2021-04-11 14:30:52,664 clickhouse_migrate:119 [INFO]: do create databse cloudatlas
2021-04-11 14:30:52,665 clickhouse_migrate:106 [INFO]: Create database cloudatlas, Ready Go!
2021-04-11 14:30:52,912 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database cloudatlas already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:52,913 clickhouse_migrate:119 [INFO]: do create databse csp
2021-04-11 14:30:52,913 clickhouse_migrate:106 [INFO]: Create database csp, Ready Go!
2021-04-11 14:30:53,155 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database csp already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:53,156 clickhouse_migrate:119 [INFO]: do create databse customer_center
2021-04-11 14:30:53,156 clickhouse_migrate:106 [INFO]: Create database customer_center, Ready Go!
2021-04-11 14:30:53,405 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/customer_center (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:53,405 clickhouse_migrate:119 [INFO]: do create databse default
2021-04-11 14:30:53,405 clickhouse_migrate:106 [INFO]: Create database default, Ready Go!
2021-04-11 14:30:53,645 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database default already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:53,645 clickhouse_migrate:119 [INFO]: do create databse dim
2021-04-11 14:30:53,645 clickhouse_migrate:106 [INFO]: Create database dim, Ready Go!
2021-04-11 14:30:53,885 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/dim (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:53,885 clickhouse_migrate:119 [INFO]: do create databse hrdb
2021-04-11 14:30:53,885 clickhouse_migrate:106 [INFO]: Create database hrdb, Ready Go!
2021-04-11 14:30:54,126 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Poco::Exception. Code: 1000, e.code() = 28, e.displayText() = File access error: no space left on device: /data/d1/clickhouse2/metadata/hrdb (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:54,126 clickhouse_migrate:119 [INFO]: do create databse msc
2021-04-11 14:30:54,126 clickhouse_migrate:106 [INFO]: Create database msc, Ready Go!
2021-04-11 14:30:54,361 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database msc already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:54,362 clickhouse_migrate:119 [INFO]: do create databse system
2021-04-11 14:30:54,362 clickhouse_migrate:106 [INFO]: Create database system, Ready Go!
2021-04-11 14:30:54,601 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database system already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:54,602 clickhouse_migrate:119 [INFO]: do create databse test
2021-04-11 14:30:54,602 clickhouse_migrate:106 [INFO]: Create database test, Ready Go!
2021-04-11 14:30:54,850 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database test already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:30:55,010 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : [u'cloudatlas_user', u'cloudatlas_user_group', u'cloudatlas_user_group_local', u'cloudatlas_user_local', u'dim_sku', u'trace_events']
2021-04-11 14:30:55,010 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : [u'cloudatlas_user_group_local', u'cloudatlas_user_local']
2021-04-11 14:30:55,010 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : [u'cloudatlas_user', u'cloudatlas_user_group', u'dim_sku', u'trace_events']
2021-04-11 14:30:55,010 clickhouse_migrate:131 [INFO]: local tables [u'cloudatlas_user_group_local', u'cloudatlas_user_local'] in cloudatlas
2021-04-11 14:30:55,010 clickhouse_migrate:101 [INFO]: Fetch table schema, cloudatlas.cloudatlas_user_group_local
2021-04-11 14:30:55,090 clickhouse_migrate:136 [INFO]: Table's schema CREATE TABLE cloudatlas.cloudatlas_user_group_local (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = MergeTree() PARTITION BY source_type ORDER BY (group_id, uid) SETTINGS index_granularity = 8192
2021-04-11 14:30:55,090 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE cloudatlas.cloudatlas_user_group_local (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = MergeTree() PARTITION BY source_type ORDER BY (group_id, uid) SETTINGS index_granularity = 8192 
2021-04-11 14:30:55,090 clickhouse_migrate:37 [INFO]: database : cloudatlas
2021-04-11 14:30:55,090 clickhouse_migrate:38 [INFO]: table : cloudatlas_user_group_local
2021-04-11 14:30:55,090 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_group_local on cluster replicated_stock (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = MergeTree() PARTITION BY source_type ORDER BY (group_id, uid) SETTINGS index_granularity = 8192 is bad
2021-04-11 14:30:55,091 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_group_local on cluster replicated_stock (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = MergeTree() PARTITION BY source_type ORDER BY (group_id, uid) SETTINGS index_granularity = 8192
2021-04-11 14:30:55,091 clickhouse_migrate:139 [INFO]: Will construct table on target cluster
2021-04-11 14:30:55,091 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_group_local on cluster replicated_stock (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = MergeTree() PARTITION BY source_type ORDER BY (group_id, uid) SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:30:55,327 clickhouse_migrate:101 [INFO]: Fetch table schema, cloudatlas.cloudatlas_user_local
2021-04-11 14:30:55,409 clickhouse_migrate:136 [INFO]: Table's schema CREATE TABLE cloudatlas.cloudatlas_user_local (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = MergeTree(dt, company_id, 8192)
2021-04-11 14:30:55,409 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE cloudatlas.cloudatlas_user_local (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = MergeTree(dt, company_id, 8192) 
2021-04-11 14:30:55,409 clickhouse_migrate:37 [INFO]: database : cloudatlas
2021-04-11 14:30:55,409 clickhouse_migrate:38 [INFO]: table : cloudatlas_user_local
2021-04-11 14:30:55,410 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_local on cluster replicated_stock (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = MergeTree(dt, company_id, 8192) is bad
2021-04-11 14:30:55,410 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_local on cluster replicated_stock (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = MergeTree(dt, company_id, 8192)
2021-04-11 14:30:55,410 clickhouse_migrate:139 [INFO]: Will construct table on target cluster
2021-04-11 14:30:55,410 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_local on cluster replicated_stock (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = MergeTree(dt, company_id, 8192)>, Ready Go !
2021-04-11 14:30:55,619 clickhouse_migrate:144 [INFO]: Will Create distributed Tables in cloudatlas
2021-04-11 14:30:55,619 clickhouse_migrate:149 [INFO]: distributed tables [u'cloudatlas_user', u'cloudatlas_user_group', u'dim_sku', u'trace_events'] in cloudatlas
2021-04-11 14:30:55,619 clickhouse_migrate:101 [INFO]: Fetch table schema, cloudatlas.cloudatlas_user
2021-04-11 14:30:55,697 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE cloudatlas.cloudatlas_user (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_local, company_id)
2021-04-11 14:30:55,698 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE cloudatlas.cloudatlas_user (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_local, company_id) 
2021-04-11 14:30:55,698 clickhouse_migrate:37 [INFO]: database : cloudatlas
2021-04-11 14:30:55,698 clickhouse_migrate:38 [INFO]: table : cloudatlas_user
2021-04-11 14:30:55,698 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user on cluster replicated_stock (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_local, company_id)
2021-04-11 14:30:55,698 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:30:55,698 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user on cluster replicated_stock (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_local, company_id)>, Ready Go !
2021-04-11 14:30:55,906 clickhouse_migrate:101 [INFO]: Fetch table schema, cloudatlas.cloudatlas_user_group
2021-04-11 14:30:56,006 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE cloudatlas.cloudatlas_user_group (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_group_local, rand())
2021-04-11 14:30:56,006 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE cloudatlas.cloudatlas_user_group (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_group_local, rand()) 
2021-04-11 14:30:56,006 clickhouse_migrate:37 [INFO]: database : cloudatlas
2021-04-11 14:30:56,006 clickhouse_migrate:38 [INFO]: table : cloudatlas_user_group
2021-04-11 14:30:56,007 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_group on cluster replicated_stock (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_group_local, rand())
2021-04-11 14:30:56,007 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:30:56,007 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_group on cluster replicated_stock (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_group_local, rand())>, Ready Go !
2021-04-11 14:30:56,210 clickhouse_migrate:101 [INFO]: Fetch table schema, cloudatlas.dim_sku
2021-04-11 14:30:56,301 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE cloudatlas.dim_sku (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192
2021-04-11 14:30:56,301 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE cloudatlas.dim_sku (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192 
2021-04-11 14:30:56,301 clickhouse_migrate:37 [INFO]: database : cloudatlas
2021-04-11 14:30:56,301 clickhouse_migrate:38 [INFO]: table : dim_sku
2021-04-11 14:30:56,302 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS cloudatlas.dim_sku on cluster replicated_stock (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192 is bad
2021-04-11 14:30:56,302 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS cloudatlas.dim_sku on cluster replicated_stock (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192
2021-04-11 14:30:56,302 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:30:56,302 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS cloudatlas.dim_sku on cluster replicated_stock (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:30:56,510 clickhouse_migrate:101 [INFO]: Fetch table schema, cloudatlas.trace_events
2021-04-11 14:30:56,643 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE cloudatlas.trace_events (`event_name` String, `alias_name` String, `spm` String, `c_t` Int32, `city_id` Int32, `area_id` Int32, `bu_id` Int32, `tid` String, `uid` Int32, `passport_id` Int64, `clienttype` Int32, `appversion` String, `app_id` Int32, `os` String, `ip` Int32, `page_id` Int32, `cms_id` Int32, `cms_name` String, `cms_page_module_id` Int32, `cms_page_module_name` String, `cms_module_id` Int32, `cms_module_name` String, `cms_module_element_code` String, `cms_item_id` Int32, `cms_item_pos` Int32, `big_activity_id` String, `cdd_pos` Int32, `search_from` String, `input_k` String, `k` String, `kid` String, `msg_id` String, `news_id` String, `order_id` Int32, `pos` Int32, `promote_type` String, `sku_id` Int32, `sku_name` String, `sku_pos` Int32, `ssu_id` Int32, `ssu_name` String, `ssu_pos` Int32, `tag` String, `type` String, `warehouse_id` Int32, `oiid` Int32, `pms_class1_id` Int32, `pms_class1_name` String, `pms_class2_id` Int32, `pms_class2_name` String, `sale_class1_id` Int32, `sale_class1_name` String, `sale_class2_id` Int32, `sale_class2_name` String, `bi_id` Int32, `bi_name` String, `ssu_num` Int32, `expect_pay_way` Int32, `order_money` Float64, `coupon_discount` Float64, `order_from` String, `channel` Int32, `task_id` Int32, `ad_position` String, `ad_info_id` String, `ad_tag` String, `hotword_value` String, `hotword_pos` String, `is_expand` Int32, `coupon_id` Int32, `key` String, `sug_key` String, `key_pos` Int32, `share_uid` Int32, `share_as` Int32, `exposure_channel` String, `exposure_page_id` Int32, `exposure_detail_id` Int32, `class1_id` Int32, `class2_id` Int32, `content` String, `class_id` Int32, `class_pos` Int32, `delivery_id` Int32, `phone` Int32, `result` Int32, `err_msg` String, `verify_code` Int32, `target_url` String, `from` String, `target` String, `refer_id` String, `object_value` String, `score` Float64, `addr` String, `activity_id` String, `feedback_id` String, `pack_id` Int32, `record_id` Int32, `channel_id` Int32, `prepay_amount` Float64, `group_buying_status` String, `goods_num` Int32, `total_amount` Float64, `param_name` String, `share_source` Int32, `format` String, `strategy` String, `reason` Int32, `fare_id` Int32, `order_status` Int32, `pop_id` Int32, `btn_location` Int32, `keyword` String, `is_selected` Int32, `login_method` Int32, `is_suggest` Int32, `status` Int32, `suggest_word` String, `suggest_pos` Int32, `company_class_id` Int32, `company_class_name` String, `testmxl` Int32, `return_num` Float64, `refund_method` String, `return_id` Int32, `return_status` String, `driver_name` String, `source_id` Int32, `payment_type` String, `order_type` String, `vendor_id` String, `sell_type` String, `pms_class3_id` String, `pms_class3_name` String, `organization_id` Int32, `amount_section` String, `isvip` Int32, `btn_pos` Int32, `class_province_id` Int32, `class_city_id` Int32, `class_area_id` Int32, `floor_area` String, `company_class1_id` Int32, `mix_rent` String, `max_rent` String, `sublet_shop_id` Int32, `id_type` Int32, `shop_close_type` Int32, `appeal_audit_status` Int32, `source_channel` String, `page_from` Int32, `class_street_id` Int32, `sublet_type` Int32, `sublet_vip` Int32, `order_trace_status` String, `show_map_point` Int32, `logistics_company_point` Int32, `is_current` Int32, `pid` String, `dt` Date, `cashier_type` Int32, `referrer` String, `test_version` String, `value` String, `hkey_pos` String, `banner_id` Int32, `is_invalid` Int32, `is_new` Int32, `distance` Int32, `member_benefit` Int32, `prime_type` Int32, `prime_level` Int32, `member_level` Int32, `searchword` String COMMENT '搜索词', `sort_type` Int32 COMMENT '排序方式', `dish_name` String COMMENT '菜品名称', `order_filter` String COMMENT '下单筛选', `recipe_id` String COMMENT '菜谱ID', `search_module_from` String COMMENT '搜索模块来源', `category1_id` Int32, `category2_name` String, `category1_name` String, `category2_id` Int32, `brand_name` String, `page_source` Int32 COMMENT '页面来源', `mgs_maintitle` String, `msg_subtitle` String, `msg_button` String, `msg_system_sign` String, `msg_model_id` Int32, `driver_phone` String, `window_content` String, `time_quantum` String, `popup_close` Int32, `white_screen_time` Int64, `ready_time` Int64, `all_load_time` Int64, `native_type` String, `business_type` String, `real_load_time` Int64, `cms_start_time` String, `cms_end_time` String, `open_time` Int64, `comp_maintype` Int32, `sku_tag` String COMMENT '商品标签', `sku_content` String COMMENT '文字评价内容', `serve_question` String COMMENT '问题', `serve_score` Int32 COMMENT '是否满意', `serve_tag` String COMMENT '标签词', `serve_content` String COMMENT '文字评价内容', `query_from` String COMMENT '搜索请求来源', `searchmode` String COMMENT '搜索方式', `ssu_price` Float64 COMMENT 'ssu金额', `ispop` Int32 COMMENT '是否是第三方', `food_type` Int32 COMMENT '食材类型', `top_tab` Int32 COMMENT '顶部tab', `rec_dish_name` String COMMENT '推荐菜品名称', `level` Int32 COMMENT '评价等级', `appraise_sku_num` Int32 COMMENT '菜品评价数量', `time` String COMMENT '评价时间', `from_sku_id` Int32 COMMENT '该商品详情页sku_id', `company_status_code` Int32 COMMENT '门店状态', `tag_word` String COMMENT '标签内容', `tag_pos` Int32 COMMENT '标签位置', `scene_status` Int32 COMMENT '场次状态', `scene_time` Int32 COMMENT '场次时间', `scene_id` Int32 COMMENT '场次ID', `real_order_money` Float64 COMMENT '下单金额（优惠后）', `order_weight` Float64 COMMENT '下单计价量', `filter_scene_id` Int32 COMMENT '筛选器场景ID', `company_phone` String COMMENT '门店注册电话', `receiver_phone` String COMMENT '收货人电话', `coupon_type` String COMMENT '优惠券类型', `source_type` Int32 COMMENT '个人中心子账号引导', `is_enable_ele` Int32 COMMENT '是否授权饿了么') ENGINE = Distributed(stock, cloudatlas, trace_events_local, rand())
2021-04-11 14:30:56,643 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE cloudatlas.trace_events (`event_name` String, `alias_name` String, `spm` String, `c_t` Int32, `city_id` Int32, `area_id` Int32, `bu_id` Int32, `tid` String, `uid` Int32, `passport_id` Int64, `clienttype` Int32, `appversion` String, `app_id` Int32, `os` String, `ip` Int32, `page_id` Int32, `cms_id` Int32, `cms_name` String, `cms_page_module_id` Int32, `cms_page_module_name` String, `cms_module_id` Int32, `cms_module_name` String, `cms_module_element_code` String, `cms_item_id` Int32, `cms_item_pos` Int32, `big_activity_id` String, `cdd_pos` Int32, `search_from` String, `input_k` String, `k` String, `kid` String, `msg_id` String, `news_id` String, `order_id` Int32, `pos` Int32, `promote_type` String, `sku_id` Int32, `sku_name` String, `sku_pos` Int32, `ssu_id` Int32, `ssu_name` String, `ssu_pos` Int32, `tag` String, `type` String, `warehouse_id` Int32, `oiid` Int32, `pms_class1_id` Int32, `pms_class1_name` String, `pms_class2_id` Int32, `pms_class2_name` String, `sale_class1_id` Int32, `sale_class1_name` String, `sale_class2_id` Int32, `sale_class2_name` String, `bi_id` Int32, `bi_name` String, `ssu_num` Int32, `expect_pay_way` Int32, `order_money` Float64, `coupon_discount` Float64, `order_from` String, `channel` Int32, `task_id` Int32, `ad_position` String, `ad_info_id` String, `ad_tag` String, `hotword_value` String, `hotword_pos` String, `is_expand` Int32, `coupon_id` Int32, `key` String, `sug_key` String, `key_pos` Int32, `share_uid` Int32, `share_as` Int32, `exposure_channel` String, `exposure_page_id` Int32, `exposure_detail_id` Int32, `class1_id` Int32, `class2_id` Int32, `content` String, `class_id` Int32, `class_pos` Int32, `delivery_id` Int32, `phone` Int32, `result` Int32, `err_msg` String, `verify_code` Int32, `target_url` String, `from` String, `target` String, `refer_id` String, `object_value` String, `score` Float64, `addr` String, `activity_id` String, `feedback_id` String, `pack_id` Int32, `record_id` Int32, `channel_id` Int32, `prepay_amount` Float64, `group_buying_status` String, `goods_num` Int32, `total_amount` Float64, `param_name` String, `share_source` Int32, `format` String, `strategy` String, `reason` Int32, `fare_id` Int32, `order_status` Int32, `pop_id` Int32, `btn_location` Int32, `keyword` String, `is_selected` Int32, `login_method` Int32, `is_suggest` Int32, `status` Int32, `suggest_word` String, `suggest_pos` Int32, `company_class_id` Int32, `company_class_name` String, `testmxl` Int32, `return_num` Float64, `refund_method` String, `return_id` Int32, `return_status` String, `driver_name` String, `source_id` Int32, `payment_type` String, `order_type` String, `vendor_id` String, `sell_type` String, `pms_class3_id` String, `pms_class3_name` String, `organization_id` Int32, `amount_section` String, `isvip` Int32, `btn_pos` Int32, `class_province_id` Int32, `class_city_id` Int32, `class_area_id` Int32, `floor_area` String, `company_class1_id` Int32, `mix_rent` String, `max_rent` String, `sublet_shop_id` Int32, `id_type` Int32, `shop_close_type` Int32, `appeal_audit_status` Int32, `source_channel` String, `page_from` Int32, `class_street_id` Int32, `sublet_type` Int32, `sublet_vip` Int32, `order_trace_status` String, `show_map_point` Int32, `logistics_company_point` Int32, `is_current` Int32, `pid` String, `dt` Date, `cashier_type` Int32, `referrer` String, `test_version` String, `value` String, `hkey_pos` String, `banner_id` Int32, `is_invalid` Int32, `is_new` Int32, `distance` Int32, `member_benefit` Int32, `prime_type` Int32, `prime_level` Int32, `member_level` Int32, `searchword` String COMMENT '搜索词', `sort_type` Int32 COMMENT '排序方式', `dish_name` String COMMENT '菜品名称', `order_filter` String COMMENT '下单筛选', `recipe_id` String COMMENT '菜谱ID', `search_module_from` String COMMENT '搜索模块来源', `category1_id` Int32, `category2_name` String, `category1_name` String, `category2_id` Int32, `brand_name` String, `page_source` Int32 COMMENT '页面来源', `mgs_maintitle` String, `msg_subtitle` String, `msg_button` String, `msg_system_sign` String, `msg_model_id` Int32, `driver_phone` String, `window_content` String, `time_quantum` String, `popup_close` Int32, `white_screen_time` Int64, `ready_time` Int64, `all_load_time` Int64, `native_type` String, `business_type` String, `real_load_time` Int64, `cms_start_time` String, `cms_end_time` String, `open_time` Int64, `comp_maintype` Int32, `sku_tag` String COMMENT '商品标签', `sku_content` String COMMENT '文字评价内容', `serve_question` String COMMENT '问题', `serve_score` Int32 COMMENT '是否满意', `serve_tag` String COMMENT '标签词', `serve_content` String COMMENT '文字评价内容', `query_from` String COMMENT '搜索请求来源', `searchmode` String COMMENT '搜索方式', `ssu_price` Float64 COMMENT 'ssu金额', `ispop` Int32 COMMENT '是否是第三方', `food_type` Int32 COMMENT '食材类型', `top_tab` Int32 COMMENT '顶部tab', `rec_dish_name` String COMMENT '推荐菜品名称', `level` Int32 COMMENT '评价等级', `appraise_sku_num` Int32 COMMENT '菜品评价数量', `time` String COMMENT '评价时间', `from_sku_id` Int32 COMMENT '该商品详情页sku_id', `company_status_code` Int32 COMMENT '门店状态', `tag_word` String COMMENT '标签内容', `tag_pos` Int32 COMMENT '标签位置', `scene_status` Int32 COMMENT '场次状态', `scene_time` Int32 COMMENT '场次时间', `scene_id` Int32 COMMENT '场次ID', `real_order_money` Float64 COMMENT '下单金额（优惠后）', `order_weight` Float64 COMMENT '下单计价量', `filter_scene_id` Int32 COMMENT '筛选器场景ID', `company_phone` String COMMENT '门店注册电话', `receiver_phone` String COMMENT '收货人电话', `coupon_type` String COMMENT '优惠券类型', `source_type` Int32 COMMENT '个人中心子账号引导', `is_enable_ele` Int32 COMMENT '是否授权饿了么') ENGINE = Distributed(stock, cloudatlas, trace_events_local, rand()) 
2021-04-11 14:30:56,644 clickhouse_migrate:37 [INFO]: database : cloudatlas
2021-04-11 14:30:56,644 clickhouse_migrate:38 [INFO]: table : trace_events
2021-04-11 14:30:56,644 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS cloudatlas.trace_events on cluster replicated_stock (`event_name` String, `alias_name` String, `spm` String, `c_t` Int32, `city_id` Int32, `area_id` Int32, `bu_id` Int32, `tid` String, `uid` Int32, `passport_id` Int64, `clienttype` Int32, `appversion` String, `app_id` Int32, `os` String, `ip` Int32, `page_id` Int32, `cms_id` Int32, `cms_name` String, `cms_page_module_id` Int32, `cms_page_module_name` String, `cms_module_id` Int32, `cms_module_name` String, `cms_module_element_code` String, `cms_item_id` Int32, `cms_item_pos` Int32, `big_activity_id` String, `cdd_pos` Int32, `search_from` String, `input_k` String, `k` String, `kid` String, `msg_id` String, `news_id` String, `order_id` Int32, `pos` Int32, `promote_type` String, `sku_id` Int32, `sku_name` String, `sku_pos` Int32, `ssu_id` Int32, `ssu_name` String, `ssu_pos` Int32, `tag` String, `type` String, `warehouse_id` Int32, `oiid` Int32, `pms_class1_id` Int32, `pms_class1_name` String, `pms_class2_id` Int32, `pms_class2_name` String, `sale_class1_id` Int32, `sale_class1_name` String, `sale_class2_id` Int32, `sale_class2_name` String, `bi_id` Int32, `bi_name` String, `ssu_num` Int32, `expect_pay_way` Int32, `order_money` Float64, `coupon_discount` Float64, `order_from` String, `channel` Int32, `task_id` Int32, `ad_position` String, `ad_info_id` String, `ad_tag` String, `hotword_value` String, `hotword_pos` String, `is_expand` Int32, `coupon_id` Int32, `key` String, `sug_key` String, `key_pos` Int32, `share_uid` Int32, `share_as` Int32, `exposure_channel` String, `exposure_page_id` Int32, `exposure_detail_id` Int32, `class1_id` Int32, `class2_id` Int32, `content` String, `class_id` Int32, `class_pos` Int32, `delivery_id` Int32, `phone` Int32, `result` Int32, `err_msg` String, `verify_code` Int32, `target_url` String, `from` String, `target` String, `refer_id` String, `object_value` String, `score` Float64, `addr` String, `activity_id` String, `feedback_id` String, `pack_id` Int32, `record_id` Int32, `channel_id` Int32, `prepay_amount` Float64, `group_buying_status` String, `goods_num` Int32, `total_amount` Float64, `param_name` String, `share_source` Int32, `format` String, `strategy` String, `reason` Int32, `fare_id` Int32, `order_status` Int32, `pop_id` Int32, `btn_location` Int32, `keyword` String, `is_selected` Int32, `login_method` Int32, `is_suggest` Int32, `status` Int32, `suggest_word` String, `suggest_pos` Int32, `company_class_id` Int32, `company_class_name` String, `testmxl` Int32, `return_num` Float64, `refund_method` String, `return_id` Int32, `return_status` String, `driver_name` String, `source_id` Int32, `payment_type` String, `order_type` String, `vendor_id` String, `sell_type` String, `pms_class3_id` String, `pms_class3_name` String, `organization_id` Int32, `amount_section` String, `isvip` Int32, `btn_pos` Int32, `class_province_id` Int32, `class_city_id` Int32, `class_area_id` Int32, `floor_area` String, `company_class1_id` Int32, `mix_rent` String, `max_rent` String, `sublet_shop_id` Int32, `id_type` Int32, `shop_close_type` Int32, `appeal_audit_status` Int32, `source_channel` String, `page_from` Int32, `class_street_id` Int32, `sublet_type` Int32, `sublet_vip` Int32, `order_trace_status` String, `show_map_point` Int32, `logistics_company_point` Int32, `is_current` Int32, `pid` String, `dt` Date, `cashier_type` Int32, `referrer` String, `test_version` String, `value` String, `hkey_pos` String, `banner_id` Int32, `is_invalid` Int32, `is_new` Int32, `distance` Int32, `member_benefit` Int32, `prime_type` Int32, `prime_level` Int32, `member_level` Int32, `searchword` String COMMENT '搜索词', `sort_type` Int32 COMMENT '排序方式', `dish_name` String COMMENT '菜品名称', `order_filter` String COMMENT '下单筛选', `recipe_id` String COMMENT '菜谱ID', `search_module_from` String COMMENT '搜索模块来源', `category1_id` Int32, `category2_name` String, `category1_name` String, `category2_id` Int32, `brand_name` String, `page_source` Int32 COMMENT '页面来源', `mgs_maintitle` String, `msg_subtitle` String, `msg_button` String, `msg_system_sign` String, `msg_model_id` Int32, `driver_phone` String, `window_content` String, `time_quantum` String, `popup_close` Int32, `white_screen_time` Int64, `ready_time` Int64, `all_load_time` Int64, `native_type` String, `business_type` String, `real_load_time` Int64, `cms_start_time` String, `cms_end_time` String, `open_time` Int64, `comp_maintype` Int32, `sku_tag` String COMMENT '商品标签', `sku_content` String COMMENT '文字评价内容', `serve_question` String COMMENT '问题', `serve_score` Int32 COMMENT '是否满意', `serve_tag` String COMMENT '标签词', `serve_content` String COMMENT '文字评价内容', `query_from` String COMMENT '搜索请求来源', `searchmode` String COMMENT '搜索方式', `ssu_price` Float64 COMMENT 'ssu金额', `ispop` Int32 COMMENT '是否是第三方', `food_type` Int32 COMMENT '食材类型', `top_tab` Int32 COMMENT '顶部tab', `rec_dish_name` String COMMENT '推荐菜品名称', `level` Int32 COMMENT '评价等级', `appraise_sku_num` Int32 COMMENT '菜品评价数量', `time` String COMMENT '评价时间', `from_sku_id` Int32 COMMENT '该商品详情页sku_id', `company_status_code` Int32 COMMENT '门店状态', `tag_word` String COMMENT '标签内容', `tag_pos` Int32 COMMENT '标签位置', `scene_status` Int32 COMMENT '场次状态', `scene_time` Int32 COMMENT '场次时间', `scene_id` Int32 COMMENT '场次ID', `real_order_money` Float64 COMMENT '下单金额（优惠后）', `order_weight` Float64 COMMENT '下单计价量', `filter_scene_id` Int32 COMMENT '筛选器场景ID', `company_phone` String COMMENT '门店注册电话', `receiver_phone` String COMMENT '收货人电话', `coupon_type` String COMMENT '优惠券类型', `source_type` Int32 COMMENT '个人中心子账号引导', `is_enable_ele` Int32 COMMENT '是否授权饿了么') ENGINE = Distributed(stock, cloudatlas, trace_events_local, rand())
2021-04-11 14:30:56,644 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:30:56,644 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS cloudatlas.trace_events on cluster replicated_stock (`event_name` String, `alias_name` String, `spm` String, `c_t` Int32, `city_id` Int32, `area_id` Int32, `bu_id` Int32, `tid` String, `uid` Int32, `passport_id` Int64, `clienttype` Int32, `appversion` String, `app_id` Int32, `os` String, `ip` Int32, `page_id` Int32, `cms_id` Int32, `cms_name` String, `cms_page_module_id` Int32, `cms_page_module_name` String, `cms_module_id` Int32, `cms_module_name` String, `cms_module_element_code` String, `cms_item_id` Int32, `cms_item_pos` Int32, `big_activity_id` String, `cdd_pos` Int32, `search_from` String, `input_k` String, `k` String, `kid` String, `msg_id` String, `news_id` String, `order_id` Int32, `pos` Int32, `promote_type` String, `sku_id` Int32, `sku_name` String, `sku_pos` Int32, `ssu_id` Int32, `ssu_name` String, `ssu_pos` Int32, `tag` String, `type` String, `warehouse_id` Int32, `oiid` Int32, `pms_class1_id` Int32, `pms_class1_name` String, `pms_class2_id` Int32, `pms_class2_name` String, `sale_class1_id` Int32, `sale_class1_name` String, `sale_class2_id` Int32, `sale_class2_name` String, `bi_id` Int32, `bi_name` String, `ssu_num` Int32, `expect_pay_way` Int32, `order_money` Float64, `coupon_discount` Float64, `order_from` String, `channel` Int32, `task_id` Int32, `ad_position` String, `ad_info_id` String, `ad_tag` String, `hotword_value` String, `hotword_pos` String, `is_expand` Int32, `coupon_id` Int32, `key` String, `sug_key` String, `key_pos` Int32, `share_uid` Int32, `share_as` Int32, `exposure_channel` String, `exposure_page_id` Int32, `exposure_detail_id` Int32, `class1_id` Int32, `class2_id` Int32, `content` String, `class_id` Int32, `class_pos` Int32, `delivery_id` Int32, `phone` Int32, `result` Int32, `err_msg` String, `verify_code` Int32, `target_url` String, `from` String, `target` String, `refer_id` String, `object_value` String, `score` Float64, `addr` String, `activity_id` String, `feedback_id` String, `pack_id` Int32, `record_id` Int32, `channel_id` Int32, `prepay_amount` Float64, `group_buying_status` String, `goods_num` Int32, `total_amount` Float64, `param_name` String, `share_source` Int32, `format` String, `strategy` String, `reason` Int32, `fare_id` Int32, `order_status` Int32, `pop_id` Int32, `btn_location` Int32, `keyword` String, `is_selected` Int32, `login_method` Int32, `is_suggest` Int32, `status` Int32, `suggest_word` String, `suggest_pos` Int32, `company_class_id` Int32, `company_class_name` String, `testmxl` Int32, `return_num` Float64, `refund_method` String, `return_id` Int32, `return_status` String, `driver_name` String, `source_id` Int32, `payment_type` String, `order_type` String, `vendor_id` String, `sell_type` String, `pms_class3_id` String, `pms_class3_name` String, `organization_id` Int32, `amount_section` String, `isvip` Int32, `btn_pos` Int32, `class_province_id` Int32, `class_city_id` Int32, `class_area_id` Int32, `floor_area` String, `company_class1_id` Int32, `mix_rent` String, `max_rent` String, `sublet_shop_id` Int32, `id_type` Int32, `shop_close_type` Int32, `appeal_audit_status` Int32, `source_channel` String, `page_from` Int32, `class_street_id` Int32, `sublet_type` Int32, `sublet_vip` Int32, `order_trace_status` String, `show_map_point` Int32, `logistics_company_point` Int32, `is_current` Int32, `pid` String, `dt` Date, `cashier_type` Int32, `referrer` String, `test_version` String, `value` String, `hkey_pos` String, `banner_id` Int32, `is_invalid` Int32, `is_new` Int32, `distance` Int32, `member_benefit` Int32, `prime_type` Int32, `prime_level` Int32, `member_level` Int32, `searchword` String COMMENT '搜索词', `sort_type` Int32 COMMENT '排序方式', `dish_name` String COMMENT '菜品名称', `order_filter` String COMMENT '下单筛选', `recipe_id` String COMMENT '菜谱ID', `search_module_from` String COMMENT '搜索模块来源', `category1_id` Int32, `category2_name` String, `category1_name` String, `category2_id` Int32, `brand_name` String, `page_source` Int32 COMMENT '页面来源', `mgs_maintitle` String, `msg_subtitle` String, `msg_button` String, `msg_system_sign` String, `msg_model_id` Int32, `driver_phone` String, `window_content` String, `time_quantum` String, `popup_close` Int32, `white_screen_time` Int64, `ready_time` Int64, `all_load_time` Int64, `native_type` String, `business_type` String, `real_load_time` Int64, `cms_start_time` String, `cms_end_time` String, `open_time` Int64, `comp_maintype` Int32, `sku_tag` String COMMENT '商品标签', `sku_content` String COMMENT '文字评价内容', `serve_question` String COMMENT '问题', `serve_score` Int32 COMMENT '是否满意', `serve_tag` String COMMENT '标签词', `serve_content` String COMMENT '文字评价内容', `query_from` String COMMENT '搜索请求来源', `searchmode` String COMMENT '搜索方式', `ssu_price` Float64 COMMENT 'ssu金额', `ispop` Int32 COMMENT '是否是第三方', `food_type` Int32 COMMENT '食材类型', `top_tab` Int32 COMMENT '顶部tab', `rec_dish_name` String COMMENT '推荐菜品名称', `level` Int32 COMMENT '评价等级', `appraise_sku_num` Int32 COMMENT '菜品评价数量', `time` String COMMENT '评价时间', `from_sku_id` Int32 COMMENT '该商品详情页sku_id', `company_status_code` Int32 COMMENT '门店状态', `tag_word` String COMMENT '标签内容', `tag_pos` Int32 COMMENT '标签位置', `scene_status` Int32 COMMENT '场次状态', `scene_time` Int32 COMMENT '场次时间', `scene_id` Int32 COMMENT '场次ID', `real_order_money` Float64 COMMENT '下单金额（优惠后）', `order_weight` Float64 COMMENT '下单计价量', `filter_scene_id` Int32 COMMENT '筛选器场景ID', `company_phone` String COMMENT '门店注册电话', `receiver_phone` String COMMENT '收货人电话', `coupon_type` String COMMENT '优惠券类型', `source_type` Int32 COMMENT '个人中心子账号引导', `is_enable_ele` Int32 COMMENT '是否授权饿了么') ENGINE = Distributed(stock, cloudatlas, trace_events_local, rand())>, Ready Go !
2021-04-11 14:30:57,022 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : []
2021-04-11 14:30:57,022 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : []
2021-04-11 14:30:57,022 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : []
2021-04-11 14:30:57,022 clickhouse_migrate:131 [INFO]: local tables [] in csp
2021-04-11 14:30:57,022 clickhouse_migrate:144 [INFO]: Will Create distributed Tables in csp
2021-04-11 14:30:57,022 clickhouse_migrate:149 [INFO]: distributed tables [] in csp
2021-04-11 14:30:57,179 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : []
2021-04-11 14:30:57,179 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : []
2021-04-11 14:30:57,179 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : []
2021-04-11 14:30:57,179 clickhouse_migrate:131 [INFO]: local tables [] in customer_center
2021-04-11 14:30:57,179 clickhouse_migrate:144 [INFO]: Will Create distributed Tables in customer_center
2021-04-11 14:30:57,179 clickhouse_migrate:149 [INFO]: distributed tables [] in customer_center
2021-04-11 14:30:57,339 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : [u'company_retention_rate_ck', u'dws_ord_oi_all_process_detail', u'dws_ord_oi_all_process_detail_clusterd', u'etl_dwd_ord_order_detail_rt', u'm4', u'm_local_test', u'm_test', u'm_u', u'm_u_local', u'ontime_all', u'ontime_local', u'result', u'stock', u'stock1', u'stock2', u'test1', u'test2', u'test3']
2021-04-11 14:30:57,340 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : [u'm_local_test', u'm_u_local', u'ontime_local']
2021-04-11 14:30:57,340 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : [u'company_retention_rate_ck', u'dws_ord_oi_all_process_detail', u'dws_ord_oi_all_process_detail_clusterd', u'etl_dwd_ord_order_detail_rt', u'm4', u'm_test', u'm_u', u'ontime_all', u'result', u'stock', u'stock1', u'stock2', u'test1', u'test2', u'test3']
2021-04-11 14:30:57,340 clickhouse_migrate:131 [INFO]: local tables [u'm_local_test', u'm_u_local', u'ontime_local'] in default
2021-04-11 14:30:57,340 clickhouse_migrate:101 [INFO]: Fetch table schema, default.m_local_test
2021-04-11 14:30:57,458 clickhouse_migrate:136 [INFO]: Table's schema CREATE TABLE default.m_local_test (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = MergeTree() PARTITION BY dt ORDER BY uid SETTINGS index_granularity = 8192
2021-04-11 14:30:57,458 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.m_local_test (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = MergeTree() PARTITION BY dt ORDER BY uid SETTINGS index_granularity = 8192 
2021-04-11 14:30:57,458 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:30:57,459 clickhouse_migrate:38 [INFO]: table : m_local_test
2021-04-11 14:30:57,459 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.m_local_test on cluster replicated_stock (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = MergeTree() PARTITION BY dt ORDER BY uid SETTINGS index_granularity = 8192 is bad
2021-04-11 14:30:57,459 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.m_local_test on cluster replicated_stock (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = MergeTree() PARTITION BY dt ORDER BY uid SETTINGS index_granularity = 8192
2021-04-11 14:30:57,459 clickhouse_migrate:139 [INFO]: Will construct table on target cluster
2021-04-11 14:30:57,459 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.m_local_test on cluster replicated_stock (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = MergeTree() PARTITION BY dt ORDER BY uid SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:30:57,658 clickhouse_migrate:142 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:30:57,658 clickhouse_migrate:101 [INFO]: Fetch table schema, default.m_u_local
2021-04-11 14:30:57,738 clickhouse_migrate:136 [INFO]: Table's schema CREATE TABLE default.m_u_local (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = MergeTree() PARTITION BY dt ORDER BY company_id SETTINGS index_granularity = 8192
2021-04-11 14:30:57,738 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.m_u_local (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = MergeTree() PARTITION BY dt ORDER BY company_id SETTINGS index_granularity = 8192 
2021-04-11 14:30:57,738 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:30:57,738 clickhouse_migrate:38 [INFO]: table : m_u_local
2021-04-11 14:30:57,738 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.m_u_local on cluster replicated_stock (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = MergeTree() PARTITION BY dt ORDER BY company_id SETTINGS index_granularity = 8192 is bad
2021-04-11 14:30:57,738 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.m_u_local on cluster replicated_stock (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = MergeTree() PARTITION BY dt ORDER BY company_id SETTINGS index_granularity = 8192
2021-04-11 14:30:57,738 clickhouse_migrate:139 [INFO]: Will construct table on target cluster
2021-04-11 14:30:57,739 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.m_u_local on cluster replicated_stock (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = MergeTree() PARTITION BY dt ORDER BY company_id SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:30:57,978 clickhouse_migrate:142 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:30:57,979 clickhouse_migrate:101 [INFO]: Fetch table schema, default.ontime_local
2021-04-11 14:30:58,066 clickhouse_migrate:136 [INFO]: Table's schema CREATE TABLE default.ontime_local (`FlightDate` Date, `Year` UInt16) ENGINE = MergeTree(FlightDate, (Year, FlightDate), 8192)
2021-04-11 14:30:58,066 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.ontime_local (`FlightDate` Date, `Year` UInt16) ENGINE = MergeTree(FlightDate, (Year, FlightDate), 8192) 
2021-04-11 14:30:58,066 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:30:58,066 clickhouse_migrate:38 [INFO]: table : ontime_local
2021-04-11 14:30:58,066 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.ontime_local on cluster replicated_stock (`FlightDate` Date, `Year` UInt16) ENGINE = MergeTree(FlightDate, (Year, FlightDate), 8192) is bad
2021-04-11 14:30:58,067 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.ontime_local on cluster replicated_stock (`FlightDate` Date, `Year` UInt16) ENGINE = MergeTree(FlightDate, (Year, FlightDate), 8192)
2021-04-11 14:30:58,067 clickhouse_migrate:139 [INFO]: Will construct table on target cluster
2021-04-11 14:30:58,067 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.ontime_local on cluster replicated_stock (`FlightDate` Date, `Year` UInt16) ENGINE = MergeTree(FlightDate, (Year, FlightDate), 8192)>, Ready Go !
2021-04-11 14:30:58,324 clickhouse_migrate:142 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:30:58,324 clickhouse_migrate:144 [INFO]: Will Create distributed Tables in default
2021-04-11 14:30:58,324 clickhouse_migrate:149 [INFO]: distributed tables [u'company_retention_rate_ck', u'dws_ord_oi_all_process_detail', u'dws_ord_oi_all_process_detail_clusterd', u'etl_dwd_ord_order_detail_rt', u'm4', u'm_test', u'm_u', u'ontime_all', u'result', u'stock', u'stock1', u'stock2', u'test1', u'test2', u'test3'] in default
2021-04-11 14:30:58,324 clickhouse_migrate:101 [INFO]: Fetch table schema, default.company_retention_rate_ck
2021-04-11 14:30:58,430 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.company_retention_rate_ck (`company_id` Int32, `bi_id` Int32, `sale_area_id` Int32, `warehouse_id` Int32, `order_datekey` Date) ENGINE = MergeTree PARTITION BY order_datekey ORDER BY (company_id, bi_id, sale_area_id, order_datekey) SAMPLE BY company_id SETTINGS index_granularity = 8192
2021-04-11 14:30:58,430 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.company_retention_rate_ck (`company_id` Int32, `bi_id` Int32, `sale_area_id` Int32, `warehouse_id` Int32, `order_datekey` Date) ENGINE = MergeTree PARTITION BY order_datekey ORDER BY (company_id, bi_id, sale_area_id, order_datekey) SAMPLE BY company_id SETTINGS index_granularity = 8192 
2021-04-11 14:30:58,430 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:30:58,430 clickhouse_migrate:38 [INFO]: table : company_retention_rate_ck
2021-04-11 14:30:58,431 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.company_retention_rate_ck on cluster replicated_stock (`company_id` Int32, `bi_id` Int32, `sale_area_id` Int32, `warehouse_id` Int32, `order_datekey` Date) ENGINE = MergeTree PARTITION BY order_datekey ORDER BY (company_id, bi_id, sale_area_id, order_datekey) SAMPLE BY company_id SETTINGS index_granularity = 8192 is bad
2021-04-11 14:30:58,431 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.company_retention_rate_ck on cluster replicated_stock (`company_id` Int32, `bi_id` Int32, `sale_area_id` Int32, `warehouse_id` Int32, `order_datekey` Date) ENGINE = MergeTree PARTITION BY order_datekey ORDER BY (company_id, bi_id, sale_area_id, order_datekey) SAMPLE BY company_id SETTINGS index_granularity = 8192
2021-04-11 14:30:58,431 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:30:58,431 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.company_retention_rate_ck on cluster replicated_stock (`company_id` Int32, `bi_id` Int32, `sale_area_id` Int32, `warehouse_id` Int32, `order_datekey` Date) ENGINE = MergeTree PARTITION BY order_datekey ORDER BY (company_id, bi_id, sale_area_id, order_datekey) SAMPLE BY company_id SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:30:58,682 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:30:58,683 clickhouse_migrate:101 [INFO]: Fetch table schema, default.dws_ord_oi_all_process_detail
2021-04-11 14:30:58,773 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.dws_ord_oi_all_process_detail (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = MergeTree(datekey, (company_id, class1_id), 8192)
2021-04-11 14:30:58,773 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.dws_ord_oi_all_process_detail (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = MergeTree(datekey, (company_id, class1_id), 8192) 
2021-04-11 14:30:58,773 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:30:58,773 clickhouse_migrate:38 [INFO]: table : dws_ord_oi_all_process_detail
2021-04-11 14:30:58,773 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.dws_ord_oi_all_process_detail on cluster replicated_stock (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = MergeTree(datekey, (company_id, class1_id), 8192) is bad
2021-04-11 14:30:58,774 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.dws_ord_oi_all_process_detail on cluster replicated_stock (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = MergeTree(datekey, (company_id, class1_id), 8192)
2021-04-11 14:30:58,774 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:30:58,774 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.dws_ord_oi_all_process_detail on cluster replicated_stock (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = MergeTree(datekey, (company_id, class1_id), 8192)>, Ready Go !
2021-04-11 14:30:59,020 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:30:59,020 clickhouse_migrate:101 [INFO]: Fetch table schema, default.dws_ord_oi_all_process_detail_clusterd
2021-04-11 14:30:59,109 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.dws_ord_oi_all_process_detail_clusterd (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = Distributed(stock, default, dws_ord_oi_all_process_detail, company_id)
2021-04-11 14:30:59,109 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.dws_ord_oi_all_process_detail_clusterd (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = Distributed(stock, default, dws_ord_oi_all_process_detail, company_id) 
2021-04-11 14:30:59,109 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:30:59,110 clickhouse_migrate:38 [INFO]: table : dws_ord_oi_all_process_detail_clusterd
2021-04-11 14:30:59,110 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.dws_ord_oi_all_process_detail_clusterd on cluster replicated_stock (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = Distributed(stock, default, dws_ord_oi_all_process_detail, company_id)
2021-04-11 14:30:59,110 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:30:59,110 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.dws_ord_oi_all_process_detail_clusterd on cluster replicated_stock (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = Distributed(stock, default, dws_ord_oi_all_process_detail, company_id)>, Ready Go !
2021-04-11 14:30:59,352 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:30:59,353 clickhouse_migrate:101 [INFO]: Fetch table schema, default.etl_dwd_ord_order_detail_rt
2021-04-11 14:30:59,440 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.etl_dwd_ord_order_detail_rt (`order_datekey` Int64, `oiid` Int64, `order_id` Int64, `ssu_id` Int64, `sku_id` Int64, `company_id` Int64, `company_sku_str_id` String, `company_sku_id` Int64, `order_status` Int64, `ssu_format` String, `ssu_brand` String, `sku_format` String, `sku_level` String, `sku_unit` String, `sku_price_unit` String, `tax_rate` Float64, `num` Float64, `ssu_price` Float64, `raw_unit_price` Float64, `unit_price` Float64, `unit_sku_num` Float64, `unit_price_num` Float64, `order_money` Float64, `order_weight` Float64, `real_price` Float64, `real_order_money` Float64, `promotion_type` Int64, `promotion_id` Int64, `coupon_discount` Float64, `promotion_discount` Float64, `total_discount` Float64, `delivery_time` Int64, `c_t` Int64, `u_t` Int64, `lock_goods_split_c_t` Int64, `expect_receive_time` String, `is_deleted` Int64, `sale_area_id` Int64, `detail_city_id` Int64, `delivery_area_id` Int64, `warehouse_id` Int64, `channel` Int64, `owner_id` Int64, `pop_flag` Int64, `saleman_id` Int64, `order_from` Int64, `payment_type` Int64, `order_type` Int64, `delivery_date_type` Int64, `trade_type` Int64, `source` Int64, `parent_id` Int64, `user_id` Int64, `sell_type` Int64, `customer_type` Int64, `sale_type_3` Int64, `sale_type_2` Int64, `sale_type` Int64, `city_flag` Int64, `claim_op_bd_id` Int64, `tag` Int64, `subtag` Int64, `first_order_datekey` Int64, `all_new_company_flag` Int64, `last_interval_days` Int64, `all_revive_company_flag` Int64, `line_first_order_datekey` Int64, `line_new_company_flag` Int64, `line_last_interval_days` Int64, `line_revive_company_flag` Int64, `line_id` Int64, `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `net_weight` Float64, `physical_count` Float64, `big_area_id` Int64, `city_id` Int64, `zhucheng_id` Int64, `zhucheng_level` Int64, `cm_area_id` Int64, `g_business_flag` Int64, `td_country_id` Int64, `td_id` Int64, `qzq_id` Int64, `c_big_area_id` Int64, `l_big_area_id` Int64, `nc_city_id` Int64, `g_satellite_big_area_id` Int64, `g_satellite_sub_area_id` Int64, `g_province_id` Int64, `g_cm_area_id` Int64, `v` Int64) ENGINE = Memory
2021-04-11 14:30:59,441 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.etl_dwd_ord_order_detail_rt (`order_datekey` Int64, `oiid` Int64, `order_id` Int64, `ssu_id` Int64, `sku_id` Int64, `company_id` Int64, `company_sku_str_id` String, `company_sku_id` Int64, `order_status` Int64, `ssu_format` String, `ssu_brand` String, `sku_format` String, `sku_level` String, `sku_unit` String, `sku_price_unit` String, `tax_rate` Float64, `num` Float64, `ssu_price` Float64, `raw_unit_price` Float64, `unit_price` Float64, `unit_sku_num` Float64, `unit_price_num` Float64, `order_money` Float64, `order_weight` Float64, `real_price` Float64, `real_order_money` Float64, `promotion_type` Int64, `promotion_id` Int64, `coupon_discount` Float64, `promotion_discount` Float64, `total_discount` Float64, `delivery_time` Int64, `c_t` Int64, `u_t` Int64, `lock_goods_split_c_t` Int64, `expect_receive_time` String, `is_deleted` Int64, `sale_area_id` Int64, `detail_city_id` Int64, `delivery_area_id` Int64, `warehouse_id` Int64, `channel` Int64, `owner_id` Int64, `pop_flag` Int64, `saleman_id` Int64, `order_from` Int64, `payment_type` Int64, `order_type` Int64, `delivery_date_type` Int64, `trade_type` Int64, `source` Int64, `parent_id` Int64, `user_id` Int64, `sell_type` Int64, `customer_type` Int64, `sale_type_3` Int64, `sale_type_2` Int64, `sale_type` Int64, `city_flag` Int64, `claim_op_bd_id` Int64, `tag` Int64, `subtag` Int64, `first_order_datekey` Int64, `all_new_company_flag` Int64, `last_interval_days` Int64, `all_revive_company_flag` Int64, `line_first_order_datekey` Int64, `line_new_company_flag` Int64, `line_last_interval_days` Int64, `line_revive_company_flag` Int64, `line_id` Int64, `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `net_weight` Float64, `physical_count` Float64, `big_area_id` Int64, `city_id` Int64, `zhucheng_id` Int64, `zhucheng_level` Int64, `cm_area_id` Int64, `g_business_flag` Int64, `td_country_id` Int64, `td_id` Int64, `qzq_id` Int64, `c_big_area_id` Int64, `l_big_area_id` Int64, `nc_city_id` Int64, `g_satellite_big_area_id` Int64, `g_satellite_sub_area_id` Int64, `g_province_id` Int64, `g_cm_area_id` Int64, `v` Int64) ENGINE = Memory 
2021-04-11 14:30:59,441 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:30:59,441 clickhouse_migrate:38 [INFO]: table : etl_dwd_ord_order_detail_rt
2021-04-11 14:30:59,441 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.etl_dwd_ord_order_detail_rt on cluster replicated_stock (`order_datekey` Int64, `oiid` Int64, `order_id` Int64, `ssu_id` Int64, `sku_id` Int64, `company_id` Int64, `company_sku_str_id` String, `company_sku_id` Int64, `order_status` Int64, `ssu_format` String, `ssu_brand` String, `sku_format` String, `sku_level` String, `sku_unit` String, `sku_price_unit` String, `tax_rate` Float64, `num` Float64, `ssu_price` Float64, `raw_unit_price` Float64, `unit_price` Float64, `unit_sku_num` Float64, `unit_price_num` Float64, `order_money` Float64, `order_weight` Float64, `real_price` Float64, `real_order_money` Float64, `promotion_type` Int64, `promotion_id` Int64, `coupon_discount` Float64, `promotion_discount` Float64, `total_discount` Float64, `delivery_time` Int64, `c_t` Int64, `u_t` Int64, `lock_goods_split_c_t` Int64, `expect_receive_time` String, `is_deleted` Int64, `sale_area_id` Int64, `detail_city_id` Int64, `delivery_area_id` Int64, `warehouse_id` Int64, `channel` Int64, `owner_id` Int64, `pop_flag` Int64, `saleman_id` Int64, `order_from` Int64, `payment_type` Int64, `order_type` Int64, `delivery_date_type` Int64, `trade_type` Int64, `source` Int64, `parent_id` Int64, `user_id` Int64, `sell_type` Int64, `customer_type` Int64, `sale_type_3` Int64, `sale_type_2` Int64, `sale_type` Int64, `city_flag` Int64, `claim_op_bd_id` Int64, `tag` Int64, `subtag` Int64, `first_order_datekey` Int64, `all_new_company_flag` Int64, `last_interval_days` Int64, `all_revive_company_flag` Int64, `line_first_order_datekey` Int64, `line_new_company_flag` Int64, `line_last_interval_days` Int64, `line_revive_company_flag` Int64, `line_id` Int64, `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `net_weight` Float64, `physical_count` Float64, `big_area_id` Int64, `city_id` Int64, `zhucheng_id` Int64, `zhucheng_level` Int64, `cm_area_id` Int64, `g_business_flag` Int64, `td_country_id` Int64, `td_id` Int64, `qzq_id` Int64, `c_big_area_id` Int64, `l_big_area_id` Int64, `nc_city_id` Int64, `g_satellite_big_area_id` Int64, `g_satellite_sub_area_id` Int64, `g_province_id` Int64, `g_cm_area_id` Int64, `v` Int64) ENGINE = Memory is bad
2021-04-11 14:30:59,441 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.etl_dwd_ord_order_detail_rt on cluster replicated_stock (`order_datekey` Int64, `oiid` Int64, `order_id` Int64, `ssu_id` Int64, `sku_id` Int64, `company_id` Int64, `company_sku_str_id` String, `company_sku_id` Int64, `order_status` Int64, `ssu_format` String, `ssu_brand` String, `sku_format` String, `sku_level` String, `sku_unit` String, `sku_price_unit` String, `tax_rate` Float64, `num` Float64, `ssu_price` Float64, `raw_unit_price` Float64, `unit_price` Float64, `unit_sku_num` Float64, `unit_price_num` Float64, `order_money` Float64, `order_weight` Float64, `real_price` Float64, `real_order_money` Float64, `promotion_type` Int64, `promotion_id` Int64, `coupon_discount` Float64, `promotion_discount` Float64, `total_discount` Float64, `delivery_time` Int64, `c_t` Int64, `u_t` Int64, `lock_goods_split_c_t` Int64, `expect_receive_time` String, `is_deleted` Int64, `sale_area_id` Int64, `detail_city_id` Int64, `delivery_area_id` Int64, `warehouse_id` Int64, `channel` Int64, `owner_id` Int64, `pop_flag` Int64, `saleman_id` Int64, `order_from` Int64, `payment_type` Int64, `order_type` Int64, `delivery_date_type` Int64, `trade_type` Int64, `source` Int64, `parent_id` Int64, `user_id` Int64, `sell_type` Int64, `customer_type` Int64, `sale_type_3` Int64, `sale_type_2` Int64, `sale_type` Int64, `city_flag` Int64, `claim_op_bd_id` Int64, `tag` Int64, `subtag` Int64, `first_order_datekey` Int64, `all_new_company_flag` Int64, `last_interval_days` Int64, `all_revive_company_flag` Int64, `line_first_order_datekey` Int64, `line_new_company_flag` Int64, `line_last_interval_days` Int64, `line_revive_company_flag` Int64, `line_id` Int64, `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `net_weight` Float64, `physical_count` Float64, `big_area_id` Int64, `city_id` Int64, `zhucheng_id` Int64, `zhucheng_level` Int64, `cm_area_id` Int64, `g_business_flag` Int64, `td_country_id` Int64, `td_id` Int64, `qzq_id` Int64, `c_big_area_id` Int64, `l_big_area_id` Int64, `nc_city_id` Int64, `g_satellite_big_area_id` Int64, `g_satellite_sub_area_id` Int64, `g_province_id` Int64, `g_cm_area_id` Int64, `v` Int64) ENGINE = Memory
2021-04-11 14:30:59,441 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:30:59,441 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.etl_dwd_ord_order_detail_rt on cluster replicated_stock (`order_datekey` Int64, `oiid` Int64, `order_id` Int64, `ssu_id` Int64, `sku_id` Int64, `company_id` Int64, `company_sku_str_id` String, `company_sku_id` Int64, `order_status` Int64, `ssu_format` String, `ssu_brand` String, `sku_format` String, `sku_level` String, `sku_unit` String, `sku_price_unit` String, `tax_rate` Float64, `num` Float64, `ssu_price` Float64, `raw_unit_price` Float64, `unit_price` Float64, `unit_sku_num` Float64, `unit_price_num` Float64, `order_money` Float64, `order_weight` Float64, `real_price` Float64, `real_order_money` Float64, `promotion_type` Int64, `promotion_id` Int64, `coupon_discount` Float64, `promotion_discount` Float64, `total_discount` Float64, `delivery_time` Int64, `c_t` Int64, `u_t` Int64, `lock_goods_split_c_t` Int64, `expect_receive_time` String, `is_deleted` Int64, `sale_area_id` Int64, `detail_city_id` Int64, `delivery_area_id` Int64, `warehouse_id` Int64, `channel` Int64, `owner_id` Int64, `pop_flag` Int64, `saleman_id` Int64, `order_from` Int64, `payment_type` Int64, `order_type` Int64, `delivery_date_type` Int64, `trade_type` Int64, `source` Int64, `parent_id` Int64, `user_id` Int64, `sell_type` Int64, `customer_type` Int64, `sale_type_3` Int64, `sale_type_2` Int64, `sale_type` Int64, `city_flag` Int64, `claim_op_bd_id` Int64, `tag` Int64, `subtag` Int64, `first_order_datekey` Int64, `all_new_company_flag` Int64, `last_interval_days` Int64, `all_revive_company_flag` Int64, `line_first_order_datekey` Int64, `line_new_company_flag` Int64, `line_last_interval_days` Int64, `line_revive_company_flag` Int64, `line_id` Int64, `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `net_weight` Float64, `physical_count` Float64, `big_area_id` Int64, `city_id` Int64, `zhucheng_id` Int64, `zhucheng_level` Int64, `cm_area_id` Int64, `g_business_flag` Int64, `td_country_id` Int64, `td_id` Int64, `qzq_id` Int64, `c_big_area_id` Int64, `l_big_area_id` Int64, `nc_city_id` Int64, `g_satellite_big_area_id` Int64, `g_satellite_sub_area_id` Int64, `g_province_id` Int64, `g_cm_area_id` Int64, `v` Int64) ENGINE = Memory>, Ready Go !
2021-04-11 14:30:59,694 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:30:59,694 clickhouse_migrate:101 [INFO]: Fetch table schema, default.m4
2021-04-11 14:30:59,799 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.m4 (`b` UInt16, `a` UInt32 MATERIALIZED b + 1, `c` UInt16, `d` UInt16) ENGINE = ReplacingMergeTree() PARTITION BY d ORDER BY (c, b) SETTINGS index_granularity = 8192
2021-04-11 14:30:59,799 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.m4 (`b` UInt16, `a` UInt32 MATERIALIZED b + 1, `c` UInt16, `d` UInt16) ENGINE = ReplacingMergeTree() PARTITION BY d ORDER BY (c, b) SETTINGS index_granularity = 8192 
2021-04-11 14:30:59,799 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:30:59,799 clickhouse_migrate:38 [INFO]: table : m4
2021-04-11 14:30:59,799 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.m4 on cluster replicated_stock (`b` UInt16, `a` UInt32 MATERIALIZED b + 1, `c` UInt16, `d` UInt16) ENGINE = ReplacingMergeTree() PARTITION BY d ORDER BY (c, b) SETTINGS index_granularity = 8192 is bad
2021-04-11 14:30:59,799 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.m4 on cluster replicated_stock (`b` UInt16, `a` UInt32 MATERIALIZED b + 1, `c` UInt16, `d` UInt16) ENGINE = ReplacingMergeTree() PARTITION BY d ORDER BY (c, b) SETTINGS index_granularity = 8192
2021-04-11 14:30:59,800 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:30:59,800 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.m4 on cluster replicated_stock (`b` UInt16, `a` UInt32 MATERIALIZED b + 1, `c` UInt16, `d` UInt16) ENGINE = ReplacingMergeTree() PARTITION BY d ORDER BY (c, b) SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:31:00,044 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:00,044 clickhouse_migrate:101 [INFO]: Fetch table schema, default.m_test
2021-04-11 14:31:00,124 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.m_test (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = Distributed(stock, default, m_local_test, rand())
2021-04-11 14:31:00,124 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.m_test (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = Distributed(stock, default, m_local_test, rand()) 
2021-04-11 14:31:00,124 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:31:00,124 clickhouse_migrate:38 [INFO]: table : m_test
2021-04-11 14:31:00,124 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.m_test on cluster replicated_stock (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = Distributed(stock, default, m_local_test, rand())
2021-04-11 14:31:00,125 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:00,125 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.m_test on cluster replicated_stock (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = Distributed(stock, default, m_local_test, rand())>, Ready Go !
2021-04-11 14:31:00,393 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:00,393 clickhouse_migrate:101 [INFO]: Fetch table schema, default.m_u
2021-04-11 14:31:00,469 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.m_u (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = Distributed(stock, default, m_u_local, rand())
2021-04-11 14:31:00,469 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.m_u (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = Distributed(stock, default, m_u_local, rand()) 
2021-04-11 14:31:00,469 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:31:00,469 clickhouse_migrate:38 [INFO]: table : m_u
2021-04-11 14:31:00,469 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.m_u on cluster replicated_stock (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = Distributed(stock, default, m_u_local, rand())
2021-04-11 14:31:00,469 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:00,470 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.m_u on cluster replicated_stock (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = Distributed(stock, default, m_u_local, rand())>, Ready Go !
2021-04-11 14:31:00,715 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:00,715 clickhouse_migrate:101 [INFO]: Fetch table schema, default.ontime_all
2021-04-11 14:31:00,823 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.ontime_all (`FlightDate` Date, `Year` UInt16) ENGINE = Distributed(stock, default, ontime_local, rand())
2021-04-11 14:31:00,824 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.ontime_all (`FlightDate` Date, `Year` UInt16) ENGINE = Distributed(stock, default, ontime_local, rand()) 
2021-04-11 14:31:00,824 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:31:00,824 clickhouse_migrate:38 [INFO]: table : ontime_all
2021-04-11 14:31:00,824 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.ontime_all on cluster replicated_stock (`FlightDate` Date, `Year` UInt16) ENGINE = Distributed(stock, default, ontime_local, rand())
2021-04-11 14:31:00,824 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:00,824 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.ontime_all on cluster replicated_stock (`FlightDate` Date, `Year` UInt16) ENGINE = Distributed(stock, default, ontime_local, rand())>, Ready Go !
2021-04-11 14:31:01,116 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:01,117 clickhouse_migrate:101 [INFO]: Fetch table schema, default.result
2021-04-11 14:31:01,213 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.result (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192
2021-04-11 14:31:01,213 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.result (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192 
2021-04-11 14:31:01,213 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:31:01,213 clickhouse_migrate:38 [INFO]: table : result
2021-04-11 14:31:01,214 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.result on cluster replicated_stock (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192 is bad
2021-04-11 14:31:01,214 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.result on cluster replicated_stock (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192
2021-04-11 14:31:01,214 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:01,214 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.result on cluster replicated_stock (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:31:01,456 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:01,456 clickhouse_migrate:101 [INFO]: Fetch table schema, default.stock
2021-04-11 14:31:01,542 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.stock (`plant` Int32, `code` Int32, `service_level` Float32, `qty` Int32) ENGINE = Log
2021-04-11 14:31:01,542 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.stock (`plant` Int32, `code` Int32, `service_level` Float32, `qty` Int32) ENGINE = Log 
2021-04-11 14:31:01,543 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:31:01,543 clickhouse_migrate:38 [INFO]: table : stock
2021-04-11 14:31:01,543 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.stock on cluster replicated_stock (`plant` Int32, `code` Int32, `service_level` Float32, `qty` Int32) ENGINE = Log is bad
2021-04-11 14:31:01,543 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.stock on cluster replicated_stock (`plant` Int32, `code` Int32, `service_level` Float32, `qty` Int32) ENGINE = Log
2021-04-11 14:31:01,543 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:01,543 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.stock on cluster replicated_stock (`plant` Int32, `code` Int32, `service_level` Float32, `qty` Int32) ENGINE = Log>, Ready Go !
2021-04-11 14:31:01,783 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:01,783 clickhouse_migrate:101 [INFO]: Fetch table schema, default.stock1
2021-04-11 14:31:01,915 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.stock1 (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty') ENGINE = Log
2021-04-11 14:31:01,915 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.stock1 (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty') ENGINE = Log 
2021-04-11 14:31:01,915 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:31:01,915 clickhouse_migrate:38 [INFO]: table : stock1
2021-04-11 14:31:01,915 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.stock1 on cluster replicated_stock (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty') ENGINE = Log is bad
2021-04-11 14:31:01,915 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.stock1 on cluster replicated_stock (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty') ENGINE = Log
2021-04-11 14:31:01,916 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:01,916 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.stock1 on cluster replicated_stock (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty') ENGINE = Log>, Ready Go !
2021-04-11 14:31:02,163 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:02,164 clickhouse_migrate:101 [INFO]: Fetch table schema, default.stock2
2021-04-11 14:31:02,241 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.stock2 (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty', `q` String DEFAULT '') ENGINE = Log
2021-04-11 14:31:02,241 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.stock2 (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty', `q` String DEFAULT '') ENGINE = Log 
2021-04-11 14:31:02,241 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:31:02,242 clickhouse_migrate:38 [INFO]: table : stock2
2021-04-11 14:31:02,242 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.stock2 on cluster replicated_stock (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty', `q` String DEFAULT '') ENGINE = Log is bad
2021-04-11 14:31:02,242 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.stock2 on cluster replicated_stock (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty', `q` String DEFAULT '') ENGINE = Log
2021-04-11 14:31:02,242 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:02,242 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.stock2 on cluster replicated_stock (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty', `q` String DEFAULT '') ENGINE = Log>, Ready Go !
2021-04-11 14:31:02,492 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:02,492 clickhouse_migrate:101 [INFO]: Fetch table schema, default.test1
2021-04-11 14:31:02,586 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.test1 (`a` Date, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192
2021-04-11 14:31:02,587 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.test1 (`a` Date, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192 
2021-04-11 14:31:02,587 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:31:02,587 clickhouse_migrate:38 [INFO]: table : test1
2021-04-11 14:31:02,587 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.test1 on cluster replicated_stock (`a` Date, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192 is bad
2021-04-11 14:31:02,587 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.test1 on cluster replicated_stock (`a` Date, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192
2021-04-11 14:31:02,587 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:02,587 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.test1 on cluster replicated_stock (`a` Date, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:31:02,829 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:02,829 clickhouse_migrate:101 [INFO]: Fetch table schema, default.test2
2021-04-11 14:31:02,906 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.test2 (`a` DateTime, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192
2021-04-11 14:31:02,906 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.test2 (`a` DateTime, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192 
2021-04-11 14:31:02,906 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:31:02,906 clickhouse_migrate:38 [INFO]: table : test2
2021-04-11 14:31:02,906 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.test2 on cluster replicated_stock (`a` DateTime, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192 is bad
2021-04-11 14:31:02,907 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.test2 on cluster replicated_stock (`a` DateTime, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192
2021-04-11 14:31:02,907 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:02,907 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.test2 on cluster replicated_stock (`a` DateTime, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:31:03,149 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:03,149 clickhouse_migrate:101 [INFO]: Fetch table schema, default.test3
2021-04-11 14:31:03,236 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.test3 (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192
2021-04-11 14:31:03,236 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.test3 (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192 
2021-04-11 14:31:03,236 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:31:03,237 clickhouse_migrate:38 [INFO]: table : test3
2021-04-11 14:31:03,237 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.test3 on cluster replicated_stock (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192 is bad
2021-04-11 14:31:03,237 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.test3 on cluster replicated_stock (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192
2021-04-11 14:31:03,237 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:03,237 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.test3 on cluster replicated_stock (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:31:03,486 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:03,638 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : [u'dim_city_manage', u'dim_city_manage_new', u'dim_product_pms_class_sku_map', u'dim_sku']
2021-04-11 14:31:03,639 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : []
2021-04-11 14:31:03,639 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : [u'dim_city_manage', u'dim_city_manage_new', u'dim_product_pms_class_sku_map', u'dim_sku']
2021-04-11 14:31:03,639 clickhouse_migrate:131 [INFO]: local tables [] in dim
2021-04-11 14:31:03,639 clickhouse_migrate:144 [INFO]: Will Create distributed Tables in dim
2021-04-11 14:31:03,639 clickhouse_migrate:149 [INFO]: distributed tables [u'dim_city_manage', u'dim_city_manage_new', u'dim_product_pms_class_sku_map', u'dim_sku'] in dim
2021-04-11 14:31:03,639 clickhouse_migrate:101 [INFO]: Fetch table schema, dim.dim_city_manage
2021-04-11 14:31:03,767 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE dim.dim_city_manage (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = ReplacingMergeTree() PRIMARY KEY sale_area_id ORDER BY sale_area_id SETTINGS index_granularity = 8192
2021-04-11 14:31:03,768 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE dim.dim_city_manage (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = ReplacingMergeTree() PRIMARY KEY sale_area_id ORDER BY sale_area_id SETTINGS index_granularity = 8192 
2021-04-11 14:31:03,768 clickhouse_migrate:37 [INFO]: database : dim
2021-04-11 14:31:03,768 clickhouse_migrate:38 [INFO]: table : dim_city_manage
2021-04-11 14:31:03,768 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS dim.dim_city_manage on cluster replicated_stock (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = ReplacingMergeTree() PRIMARY KEY sale_area_id ORDER BY sale_area_id SETTINGS index_granularity = 8192 is bad
2021-04-11 14:31:03,768 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS dim.dim_city_manage on cluster replicated_stock (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = ReplacingMergeTree() PRIMARY KEY sale_area_id ORDER BY sale_area_id SETTINGS index_granularity = 8192
2021-04-11 14:31:03,768 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:03,769 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS dim.dim_city_manage on cluster replicated_stock (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = ReplacingMergeTree() PRIMARY KEY sale_area_id ORDER BY sale_area_id SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:31:04,317 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:04,318 clickhouse_migrate:101 [INFO]: Fetch table schema, dim.dim_city_manage_new
2021-04-11 14:31:04,429 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE dim.dim_city_manage_new (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = MergeTree() PARTITION BY big_area_id ORDER BY big_area_id SETTINGS index_granularity = 8192
2021-04-11 14:31:04,429 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE dim.dim_city_manage_new (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = MergeTree() PARTITION BY big_area_id ORDER BY big_area_id SETTINGS index_granularity = 8192 
2021-04-11 14:31:04,429 clickhouse_migrate:37 [INFO]: database : dim
2021-04-11 14:31:04,430 clickhouse_migrate:38 [INFO]: table : dim_city_manage_new
2021-04-11 14:31:04,430 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS dim.dim_city_manage_new on cluster replicated_stock (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = MergeTree() PARTITION BY big_area_id ORDER BY big_area_id SETTINGS index_granularity = 8192 is bad
2021-04-11 14:31:04,430 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS dim.dim_city_manage_new on cluster replicated_stock (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = MergeTree() PARTITION BY big_area_id ORDER BY big_area_id SETTINGS index_granularity = 8192
2021-04-11 14:31:04,430 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:04,430 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS dim.dim_city_manage_new on cluster replicated_stock (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = MergeTree() PARTITION BY big_area_id ORDER BY big_area_id SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:31:04,673 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:04,673 clickhouse_migrate:101 [INFO]: Fetch table schema, dim.dim_product_pms_class_sku_map
2021-04-11 14:31:04,762 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE dim.dim_product_pms_class_sku_map (`id` UInt32 COMMENT '映射id(主键)', `class1_id` UInt32 COMMENT '一级分类id', `class1_name` String COMMENT '一级分类名称', `class2_id` UInt32 COMMENT '二级分类id', `class2_name` String COMMENT '二级分类名称', `class3_id` UInt32 COMMENT '三级分类id', `class3_name` String COMMENT '三级分类名称', `sku_id` UInt32 COMMENT 'sku_id', `is_deleted` UInt32 COMMENT '删除') ENGINE = MergeTree() PARTITION BY sku_id ORDER BY sku_id SETTINGS index_granularity = 8192
2021-04-11 14:31:04,762 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE dim.dim_product_pms_class_sku_map (`id` UInt32 COMMENT '映射id(主键)', `class1_id` UInt32 COMMENT '一级分类id', `class1_name` String COMMENT '一级分类名称', `class2_id` UInt32 COMMENT '二级分类id', `class2_name` String COMMENT '二级分类名称', `class3_id` UInt32 COMMENT '三级分类id', `class3_name` String COMMENT '三级分类名称', `sku_id` UInt32 COMMENT 'sku_id', `is_deleted` UInt32 COMMENT '删除') ENGINE = MergeTree() PARTITION BY sku_id ORDER BY sku_id SETTINGS index_granularity = 8192 
2021-04-11 14:31:04,763 clickhouse_migrate:37 [INFO]: database : dim
2021-04-11 14:31:04,763 clickhouse_migrate:38 [INFO]: table : dim_product_pms_class_sku_map
2021-04-11 14:31:04,763 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS dim.dim_product_pms_class_sku_map on cluster replicated_stock (`id` UInt32 COMMENT '映射id(主键)', `class1_id` UInt32 COMMENT '一级分类id', `class1_name` String COMMENT '一级分类名称', `class2_id` UInt32 COMMENT '二级分类id', `class2_name` String COMMENT '二级分类名称', `class3_id` UInt32 COMMENT '三级分类id', `class3_name` String COMMENT '三级分类名称', `sku_id` UInt32 COMMENT 'sku_id', `is_deleted` UInt32 COMMENT '删除') ENGINE = MergeTree() PARTITION BY sku_id ORDER BY sku_id SETTINGS index_granularity = 8192 is bad
2021-04-11 14:31:04,763 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS dim.dim_product_pms_class_sku_map on cluster replicated_stock (`id` UInt32 COMMENT '映射id(主键)', `class1_id` UInt32 COMMENT '一级分类id', `class1_name` String COMMENT '一级分类名称', `class2_id` UInt32 COMMENT '二级分类id', `class2_name` String COMMENT '二级分类名称', `class3_id` UInt32 COMMENT '三级分类id', `class3_name` String COMMENT '三级分类名称', `sku_id` UInt32 COMMENT 'sku_id', `is_deleted` UInt32 COMMENT '删除') ENGINE = MergeTree() PARTITION BY sku_id ORDER BY sku_id SETTINGS index_granularity = 8192
2021-04-11 14:31:04,763 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:04,763 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS dim.dim_product_pms_class_sku_map on cluster replicated_stock (`id` UInt32 COMMENT '映射id(主键)', `class1_id` UInt32 COMMENT '一级分类id', `class1_name` String COMMENT '一级分类名称', `class2_id` UInt32 COMMENT '二级分类id', `class2_name` String COMMENT '二级分类名称', `class3_id` UInt32 COMMENT '三级分类id', `class3_name` String COMMENT '三级分类名称', `sku_id` UInt32 COMMENT 'sku_id', `is_deleted` UInt32 COMMENT '删除') ENGINE = MergeTree() PARTITION BY sku_id ORDER BY sku_id SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:31:05,019 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:05,020 clickhouse_migrate:101 [INFO]: Fetch table schema, dim.dim_sku
2021-04-11 14:31:05,119 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE dim.dim_sku (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192
2021-04-11 14:31:05,120 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE dim.dim_sku (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192 
2021-04-11 14:31:05,120 clickhouse_migrate:37 [INFO]: database : dim
2021-04-11 14:31:05,120 clickhouse_migrate:38 [INFO]: table : dim_sku
2021-04-11 14:31:05,121 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS dim.dim_sku on cluster replicated_stock (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192 is bad
2021-04-11 14:31:05,121 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS dim.dim_sku on cluster replicated_stock (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192
2021-04-11 14:31:05,121 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:05,121 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS dim.dim_sku on cluster replicated_stock (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:31:05,379 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:05,531 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : [u'DUAL', u't_main_psn_info']
2021-04-11 14:31:05,531 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : []
2021-04-11 14:31:05,531 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : [u'DUAL', u't_main_psn_info']
2021-04-11 14:31:05,531 clickhouse_migrate:131 [INFO]: local tables [] in hrdb
2021-04-11 14:31:05,531 clickhouse_migrate:144 [INFO]: Will Create distributed Tables in hrdb
2021-04-11 14:31:05,532 clickhouse_migrate:149 [INFO]: distributed tables [u'DUAL', u't_main_psn_info'] in hrdb
2021-04-11 14:31:05,532 clickhouse_migrate:101 [INFO]: Fetch table schema, hrdb.DUAL
2021-04-11 14:31:05,630 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE hrdb.DUAL (`id` UInt64) ENGINE = Memory
2021-04-11 14:31:05,630 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE hrdb.DUAL (`id` UInt64) ENGINE = Memory 
2021-04-11 14:31:05,630 clickhouse_migrate:37 [INFO]: database : hrdb
2021-04-11 14:31:05,630 clickhouse_migrate:38 [INFO]: table : DUAL
2021-04-11 14:31:05,630 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS hrdb.DUAL on cluster replicated_stock (`id` UInt64) ENGINE = Memory is bad
2021-04-11 14:31:05,630 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS hrdb.DUAL on cluster replicated_stock (`id` UInt64) ENGINE = Memory
2021-04-11 14:31:05,631 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:05,631 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS hrdb.DUAL on cluster replicated_stock (`id` UInt64) ENGINE = Memory>, Ready Go !
2021-04-11 14:31:06,183 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:06,184 clickhouse_migrate:101 [INFO]: Fetch table schema, hrdb.t_main_psn_info
2021-04-11 14:31:06,284 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE hrdb.t_main_psn_info (`pk_psndoc` String, `code` Nullable(String), `name` Nullable(String), `pk_idtype` Nullable(String), `idtype` Nullable(String), `id` Nullable(String), `sex` Nullable(Int32), `pk_nationality` Nullable(String), `nationality` Nullable(String), `pk_nativeplace` Nullable(String), `nativeplace` Nullable(String), `pk_characterrpr` Nullable(String), `characterrpr` Nullable(String), `pk_marital` Nullable(String), `marital` Nullable(String), `pk_polity` Nullable(String), `polity` Nullable(String), `email` Nullable(String), `mobile` Nullable(String), `pk_org` Nullable(String), `org` Nullable(String), `org_short` Nullable(String), `org_code` Nullable(String), `pk_dispatch_corp` Nullable(String), `dispatch_corp` Nullable(String), `pk_contract_corp` Nullable(String), `contract_corp` Nullable(String), `pk_dept` Nullable(String), `dept` Nullable(String), `dept_code` Nullable(String), `dept_path` Nullable(String), `pk_post` Nullable(String), `post` Nullable(String), `post_code` Nullable(String), `pk_work_city` Nullable(String), `work_city` Nullable(String), `pk_work_address` Nullable(String), `work_address` Nullable(String), `pk_psn_class` Nullable(String), `psn_class` Nullable(String), `pk_mng_rank` Nullable(String), `mng_rank` Nullable(String), `pk_nmng_rank` Nullable(String), `nmng_rank` Nullable(String), `pk_salary_card_pro` Nullable(String), `salary_card_pro` Nullable(String), `pk_salary_card_city` Nullable(String), `salary_card_city` Nullable(String), `pk_bank_type` Nullable(String), `bank_type` Nullable(String), `pk_bank` Nullable(String), `bank` Nullable(String), `bank_number` Nullable(String), `first_join_date` Nullable(Date), `last_join_date` Date, `last_begin_date` Nullable(Date), `regular_date` Nullable(Date), `trail_result` Nullable(Int32), `psn_status` Nullable(Int32), `email_prefix` Nullable(String), `sign_date` Nullable(Date), `dimission_date` Nullable(Date), `post_level` Nullable(String), `pk_doc_address` Nullable(String), `doc_address` Nullable(String), `pk_social_sec` Nullable(String), `social_sec` Nullable(String), `personal_email` Nullable(String), `has_trial` Nullable(String), `pk_psn_rank` Nullable(String), `psn_rank` Nullable(String), `ctrt_begin_date` Nullable(Date), `join_work_date` Nullable(Date)) ENGINE = MergeTree ORDER BY pk_psndoc SETTINGS index_granularity = 8192
2021-04-11 14:31:06,284 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE hrdb.t_main_psn_info (`pk_psndoc` String, `code` Nullable(String), `name` Nullable(String), `pk_idtype` Nullable(String), `idtype` Nullable(String), `id` Nullable(String), `sex` Nullable(Int32), `pk_nationality` Nullable(String), `nationality` Nullable(String), `pk_nativeplace` Nullable(String), `nativeplace` Nullable(String), `pk_characterrpr` Nullable(String), `characterrpr` Nullable(String), `pk_marital` Nullable(String), `marital` Nullable(String), `pk_polity` Nullable(String), `polity` Nullable(String), `email` Nullable(String), `mobile` Nullable(String), `pk_org` Nullable(String), `org` Nullable(String), `org_short` Nullable(String), `org_code` Nullable(String), `pk_dispatch_corp` Nullable(String), `dispatch_corp` Nullable(String), `pk_contract_corp` Nullable(String), `contract_corp` Nullable(String), `pk_dept` Nullable(String), `dept` Nullable(String), `dept_code` Nullable(String), `dept_path` Nullable(String), `pk_post` Nullable(String), `post` Nullable(String), `post_code` Nullable(String), `pk_work_city` Nullable(String), `work_city` Nullable(String), `pk_work_address` Nullable(String), `work_address` Nullable(String), `pk_psn_class` Nullable(String), `psn_class` Nullable(String), `pk_mng_rank` Nullable(String), `mng_rank` Nullable(String), `pk_nmng_rank` Nullable(String), `nmng_rank` Nullable(String), `pk_salary_card_pro` Nullable(String), `salary_card_pro` Nullable(String), `pk_salary_card_city` Nullable(String), `salary_card_city` Nullable(String), `pk_bank_type` Nullable(String), `bank_type` Nullable(String), `pk_bank` Nullable(String), `bank` Nullable(String), `bank_number` Nullable(String), `first_join_date` Nullable(Date), `last_join_date` Date, `last_begin_date` Nullable(Date), `regular_date` Nullable(Date), `trail_result` Nullable(Int32), `psn_status` Nullable(Int32), `email_prefix` Nullable(String), `sign_date` Nullable(Date), `dimission_date` Nullable(Date), `post_level` Nullable(String), `pk_doc_address` Nullable(String), `doc_address` Nullable(String), `pk_social_sec` Nullable(String), `social_sec` Nullable(String), `personal_email` Nullable(String), `has_trial` Nullable(String), `pk_psn_rank` Nullable(String), `psn_rank` Nullable(String), `ctrt_begin_date` Nullable(Date), `join_work_date` Nullable(Date)) ENGINE = MergeTree ORDER BY pk_psndoc SETTINGS index_granularity = 8192 
2021-04-11 14:31:06,284 clickhouse_migrate:37 [INFO]: database : hrdb
2021-04-11 14:31:06,285 clickhouse_migrate:38 [INFO]: table : t_main_psn_info
2021-04-11 14:31:06,285 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS hrdb.t_main_psn_info on cluster replicated_stock (`pk_psndoc` String, `code` Nullable(String), `name` Nullable(String), `pk_idtype` Nullable(String), `idtype` Nullable(String), `id` Nullable(String), `sex` Nullable(Int32), `pk_nationality` Nullable(String), `nationality` Nullable(String), `pk_nativeplace` Nullable(String), `nativeplace` Nullable(String), `pk_characterrpr` Nullable(String), `characterrpr` Nullable(String), `pk_marital` Nullable(String), `marital` Nullable(String), `pk_polity` Nullable(String), `polity` Nullable(String), `email` Nullable(String), `mobile` Nullable(String), `pk_org` Nullable(String), `org` Nullable(String), `org_short` Nullable(String), `org_code` Nullable(String), `pk_dispatch_corp` Nullable(String), `dispatch_corp` Nullable(String), `pk_contract_corp` Nullable(String), `contract_corp` Nullable(String), `pk_dept` Nullable(String), `dept` Nullable(String), `dept_code` Nullable(String), `dept_path` Nullable(String), `pk_post` Nullable(String), `post` Nullable(String), `post_code` Nullable(String), `pk_work_city` Nullable(String), `work_city` Nullable(String), `pk_work_address` Nullable(String), `work_address` Nullable(String), `pk_psn_class` Nullable(String), `psn_class` Nullable(String), `pk_mng_rank` Nullable(String), `mng_rank` Nullable(String), `pk_nmng_rank` Nullable(String), `nmng_rank` Nullable(String), `pk_salary_card_pro` Nullable(String), `salary_card_pro` Nullable(String), `pk_salary_card_city` Nullable(String), `salary_card_city` Nullable(String), `pk_bank_type` Nullable(String), `bank_type` Nullable(String), `pk_bank` Nullable(String), `bank` Nullable(String), `bank_number` Nullable(String), `first_join_date` Nullable(Date), `last_join_date` Date, `last_begin_date` Nullable(Date), `regular_date` Nullable(Date), `trail_result` Nullable(Int32), `psn_status` Nullable(Int32), `email_prefix` Nullable(String), `sign_date` Nullable(Date), `dimission_date` Nullable(Date), `post_level` Nullable(String), `pk_doc_address` Nullable(String), `doc_address` Nullable(String), `pk_social_sec` Nullable(String), `social_sec` Nullable(String), `personal_email` Nullable(String), `has_trial` Nullable(String), `pk_psn_rank` Nullable(String), `psn_rank` Nullable(String), `ctrt_begin_date` Nullable(Date), `join_work_date` Nullable(Date)) ENGINE = MergeTree ORDER BY pk_psndoc SETTINGS index_granularity = 8192 is bad
2021-04-11 14:31:06,285 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS hrdb.t_main_psn_info on cluster replicated_stock (`pk_psndoc` String, `code` Nullable(String), `name` Nullable(String), `pk_idtype` Nullable(String), `idtype` Nullable(String), `id` Nullable(String), `sex` Nullable(Int32), `pk_nationality` Nullable(String), `nationality` Nullable(String), `pk_nativeplace` Nullable(String), `nativeplace` Nullable(String), `pk_characterrpr` Nullable(String), `characterrpr` Nullable(String), `pk_marital` Nullable(String), `marital` Nullable(String), `pk_polity` Nullable(String), `polity` Nullable(String), `email` Nullable(String), `mobile` Nullable(String), `pk_org` Nullable(String), `org` Nullable(String), `org_short` Nullable(String), `org_code` Nullable(String), `pk_dispatch_corp` Nullable(String), `dispatch_corp` Nullable(String), `pk_contract_corp` Nullable(String), `contract_corp` Nullable(String), `pk_dept` Nullable(String), `dept` Nullable(String), `dept_code` Nullable(String), `dept_path` Nullable(String), `pk_post` Nullable(String), `post` Nullable(String), `post_code` Nullable(String), `pk_work_city` Nullable(String), `work_city` Nullable(String), `pk_work_address` Nullable(String), `work_address` Nullable(String), `pk_psn_class` Nullable(String), `psn_class` Nullable(String), `pk_mng_rank` Nullable(String), `mng_rank` Nullable(String), `pk_nmng_rank` Nullable(String), `nmng_rank` Nullable(String), `pk_salary_card_pro` Nullable(String), `salary_card_pro` Nullable(String), `pk_salary_card_city` Nullable(String), `salary_card_city` Nullable(String), `pk_bank_type` Nullable(String), `bank_type` Nullable(String), `pk_bank` Nullable(String), `bank` Nullable(String), `bank_number` Nullable(String), `first_join_date` Nullable(Date), `last_join_date` Date, `last_begin_date` Nullable(Date), `regular_date` Nullable(Date), `trail_result` Nullable(Int32), `psn_status` Nullable(Int32), `email_prefix` Nullable(String), `sign_date` Nullable(Date), `dimission_date` Nullable(Date), `post_level` Nullable(String), `pk_doc_address` Nullable(String), `doc_address` Nullable(String), `pk_social_sec` Nullable(String), `social_sec` Nullable(String), `personal_email` Nullable(String), `has_trial` Nullable(String), `pk_psn_rank` Nullable(String), `psn_rank` Nullable(String), `ctrt_begin_date` Nullable(Date), `join_work_date` Nullable(Date)) ENGINE = MergeTree ORDER BY pk_psndoc SETTINGS index_granularity = 8192
2021-04-11 14:31:06,285 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:31:06,285 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS hrdb.t_main_psn_info on cluster replicated_stock (`pk_psndoc` String, `code` Nullable(String), `name` Nullable(String), `pk_idtype` Nullable(String), `idtype` Nullable(String), `id` Nullable(String), `sex` Nullable(Int32), `pk_nationality` Nullable(String), `nationality` Nullable(String), `pk_nativeplace` Nullable(String), `nativeplace` Nullable(String), `pk_characterrpr` Nullable(String), `characterrpr` Nullable(String), `pk_marital` Nullable(String), `marital` Nullable(String), `pk_polity` Nullable(String), `polity` Nullable(String), `email` Nullable(String), `mobile` Nullable(String), `pk_org` Nullable(String), `org` Nullable(String), `org_short` Nullable(String), `org_code` Nullable(String), `pk_dispatch_corp` Nullable(String), `dispatch_corp` Nullable(String), `pk_contract_corp` Nullable(String), `contract_corp` Nullable(String), `pk_dept` Nullable(String), `dept` Nullable(String), `dept_code` Nullable(String), `dept_path` Nullable(String), `pk_post` Nullable(String), `post` Nullable(String), `post_code` Nullable(String), `pk_work_city` Nullable(String), `work_city` Nullable(String), `pk_work_address` Nullable(String), `work_address` Nullable(String), `pk_psn_class` Nullable(String), `psn_class` Nullable(String), `pk_mng_rank` Nullable(String), `mng_rank` Nullable(String), `pk_nmng_rank` Nullable(String), `nmng_rank` Nullable(String), `pk_salary_card_pro` Nullable(String), `salary_card_pro` Nullable(String), `pk_salary_card_city` Nullable(String), `salary_card_city` Nullable(String), `pk_bank_type` Nullable(String), `bank_type` Nullable(String), `pk_bank` Nullable(String), `bank` Nullable(String), `bank_number` Nullable(String), `first_join_date` Nullable(Date), `last_join_date` Date, `last_begin_date` Nullable(Date), `regular_date` Nullable(Date), `trail_result` Nullable(Int32), `psn_status` Nullable(Int32), `email_prefix` Nullable(String), `sign_date` Nullable(Date), `dimission_date` Nullable(Date), `post_level` Nullable(String), `pk_doc_address` Nullable(String), `doc_address` Nullable(String), `pk_social_sec` Nullable(String), `social_sec` Nullable(String), `personal_email` Nullable(String), `has_trial` Nullable(String), `pk_psn_rank` Nullable(String), `psn_rank` Nullable(String), `ctrt_begin_date` Nullable(Date), `join_work_date` Nullable(Date)) ENGINE = MergeTree ORDER BY pk_psndoc SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:31:06,557 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:31:06,714 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : [u'.inner.aggregatingmergetree_view', u'.inner.dws_activity_oi_ts_local_v1_view', u'.inner.dws_activity_oi_ts_test_view', u'.inner.dws_activity_oi_ts_view_v2', u'activity_order', u'activity_order_local', u'aggregatingmergetree_view', u'company_recharge_detail', u'coupon_trigger', u'coupon_trigger_local', u'dws_activity_oi_ts', u'dws_activity_oi_ts_local_v1_view', u'dws_activity_oi_ts_local_v2', u'dws_activity_oi_ts_test_view', u'dws_activity_oi_ts_v1', u'dws_activity_oi_ts_v1_view', u'dws_activity_oi_ts_v2', u'dws_activity_oi_ts_v2_local', u'dws_activity_oi_ts_view_v2', u'm4_all', u'marketing_activity', u'marketing_activity_local']
2021-04-11 14:31:06,715 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : [u'.inner.dws_activity_oi_ts_local_v1_view', u'activity_order_local', u'coupon_trigger_local', u'dws_activity_oi_ts_local_v1_view', u'dws_activity_oi_ts_local_v2', u'dws_activity_oi_ts_v2_local', u'marketing_activity_local']
2021-04-11 14:31:06,715 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : [u'.inner.aggregatingmergetree_view', u'.inner.dws_activity_oi_ts_test_view', u'.inner.dws_activity_oi_ts_view_v2', u'activity_order', u'aggregatingmergetree_view', u'company_recharge_detail', u'coupon_trigger', u'dws_activity_oi_ts', u'dws_activity_oi_ts_test_view', u'dws_activity_oi_ts_v1', u'dws_activity_oi_ts_v1_view', u'dws_activity_oi_ts_v2', u'dws_activity_oi_ts_view_v2', u'm4_all', u'marketing_activity']
2021-04-11 14:31:06,715 clickhouse_migrate:131 [INFO]: local tables [u'.inner.dws_activity_oi_ts_local_v1_view', u'activity_order_local', u'coupon_trigger_local', u'dws_activity_oi_ts_local_v1_view', u'dws_activity_oi_ts_local_v2', u'dws_activity_oi_ts_v2_local', u'marketing_activity_local'] in msc
2021-04-11 14:31:06,715 clickhouse_migrate:101 [INFO]: Fetch table schema, msc..inner.dws_activity_oi_ts_local_v1_view
2021-04-11 14:37:00,179 clickhouse_migrate:119 [INFO]: do create databse cloudatlas
2021-04-11 14:37:00,181 clickhouse_migrate:106 [INFO]: Create database cloudatlas, Ready Go!
2021-04-11 14:37:00,432 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database cloudatlas already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:37:00,432 clickhouse_migrate:119 [INFO]: do create databse csp
2021-04-11 14:37:00,432 clickhouse_migrate:106 [INFO]: Create database csp, Ready Go!
2021-04-11 14:37:00,671 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database csp already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:37:00,671 clickhouse_migrate:119 [INFO]: do create databse customer_center
2021-04-11 14:37:00,671 clickhouse_migrate:106 [INFO]: Create database customer_center, Ready Go!
2021-04-11 14:37:00,929 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev06:9002]: Code: 82, e.displayText() = DB::Exception: Database customer_center already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:37:00,929 clickhouse_migrate:119 [INFO]: do create databse default
2021-04-11 14:37:00,929 clickhouse_migrate:106 [INFO]: Create database default, Ready Go!
2021-04-11 14:37:01,170 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database default already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:37:01,170 clickhouse_migrate:119 [INFO]: do create databse dim
2021-04-11 14:37:01,171 clickhouse_migrate:106 [INFO]: Create database dim, Ready Go!
2021-04-11 14:37:01,429 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9001]: Code: 82, e.displayText() = DB::Exception: Database dim already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:37:01,429 clickhouse_migrate:119 [INFO]: do create databse hrdb
2021-04-11 14:37:01,429 clickhouse_migrate:106 [INFO]: Create database hrdb, Ready Go!
2021-04-11 14:37:01,664 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev06:9002]: Code: 82, e.displayText() = DB::Exception: Database hrdb already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:37:01,664 clickhouse_migrate:119 [INFO]: do create databse msc
2021-04-11 14:37:01,664 clickhouse_migrate:106 [INFO]: Create database msc, Ready Go!
2021-04-11 14:37:01,907 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database msc already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:37:01,907 clickhouse_migrate:119 [INFO]: do create databse system
2021-04-11 14:37:01,907 clickhouse_migrate:106 [INFO]: Create database system, Ready Go!
2021-04-11 14:37:02,151 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database system already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:37:02,151 clickhouse_migrate:119 [INFO]: do create databse test
2021-04-11 14:37:02,151 clickhouse_migrate:106 [INFO]: Create database test, Ready Go!
2021-04-11 14:37:02,391 clickhouse_migrate:122 [ERROR]: Exception when execute create database DB::Exception: There was an error on [dev05:9003]: Code: 82, e.displayText() = DB::Exception: Database test already exists. (version 19.8.3.8). Stack trace:

0. ./clickhouse(StackTrace::StackTrace()+0x25) [0x10bda0fd]
1. ./clickhouse(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x48) [0xafddea0]
2. ./clickhouse(std::_MakeUniq<DB::Exception>::__single_object std::make_unique<DB::Exception, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&)+0x52) [0xfc71047]
3. ./clickhouse(DB::DDLQueryStatusInputStream::readImpl()+0x9c2) [0xfc6ec20]
4. ./clickhouse(DB::IBlockInputStream::read()+0x149) [0xfb21531]
5. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x86) [0xfb1f3f2]
6. ./clickhouse() [0xfb1f1b8]
7. ./clickhouse() [0xfb1f5a2]
8. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
9. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0xfc) [0x10bdfbc8]
10. ./clickhouse(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be1021]
11. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(std::__invoke_other, ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&)+0x20) [0x10be5728]
12. ./clickhouse(std::__invoke_result<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>::type std::__invoke<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, (std::__invoke_result&&)...)+0x20) [0x10be3e6f]
13. ./clickhouse(decltype(auto) std::__apply_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&, std::integer_sequence<unsigned long>)+0x24) [0x10be2730]
14. ./clickhouse(decltype(auto) std::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3} const&, std::tuple<> const&)+0x37) [0x10be276a]
15. ./clickhouse(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x52) [0x10be269a]
16. ./clickhouse(std::_Function_handler<void (), ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x20) [0x10be57ae]
17. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xaffcc72]
18. ./clickhouse(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0xfc) [0x10bdf264]
19. ./clickhouse(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}::operator()() const+0x35) [0x10be0499]
20. ./clickhouse(void std::__invoke_impl<void, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(std::__invoke_other, ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)+0x20) [0x10be345e]
21. ./clickhouse(std::__invoke_result<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>::type std::__invoke<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&, (std::__invoke_result&&)...)+0x20) [0x10be1ca6]
22. ./clickhouse(decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x28) [0x10be7650]
23. ./clickhouse(std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> >::operator()()+0x18) [0x10be75fa]
24. ./clickhouse(std::thread::_State_impl<std::thread::_Invoker<std::tuple<ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}> > >::_M_run()+0x1c) [0x10be75c4]
25. ./clickhouse() [0x11f6384f]
26. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f539be1f182]
27. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f539b63e47d]

2021-04-11 14:37:02,549 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : [u'cloudatlas_user', u'cloudatlas_user_group', u'cloudatlas_user_group_local', u'cloudatlas_user_local', u'dim_sku', u'trace_events']
2021-04-11 14:37:02,550 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : [u'cloudatlas_user_group_local', u'cloudatlas_user_local']
2021-04-11 14:37:02,550 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : [u'cloudatlas_user', u'cloudatlas_user_group', u'dim_sku', u'trace_events']
2021-04-11 14:37:02,550 clickhouse_migrate:131 [INFO]: local tables [u'cloudatlas_user_group_local', u'cloudatlas_user_local'] in cloudatlas
2021-04-11 14:37:02,550 clickhouse_migrate:101 [INFO]: Fetch table schema, cloudatlas.cloudatlas_user_group_local
2021-04-11 14:37:02,628 clickhouse_migrate:136 [INFO]: Table's schema CREATE TABLE cloudatlas.cloudatlas_user_group_local (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = MergeTree() PARTITION BY source_type ORDER BY (group_id, uid) SETTINGS index_granularity = 8192
2021-04-11 14:37:02,628 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE cloudatlas.cloudatlas_user_group_local (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = MergeTree() PARTITION BY source_type ORDER BY (group_id, uid) SETTINGS index_granularity = 8192 
2021-04-11 14:37:02,628 clickhouse_migrate:37 [INFO]: database : cloudatlas
2021-04-11 14:37:02,628 clickhouse_migrate:38 [INFO]: table : cloudatlas_user_group_local
2021-04-11 14:37:02,629 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_group_local on cluster replicated_stock (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = MergeTree() PARTITION BY source_type ORDER BY (group_id, uid) SETTINGS index_granularity = 8192 is bad
2021-04-11 14:37:02,629 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_group_local on cluster replicated_stock (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = MergeTree() PARTITION BY source_type ORDER BY (group_id, uid) SETTINGS index_granularity = 8192
2021-04-11 14:37:02,629 clickhouse_migrate:139 [INFO]: Will construct table on target cluster
2021-04-11 14:37:02,629 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_group_local on cluster replicated_stock (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = MergeTree() PARTITION BY source_type ORDER BY (group_id, uid) SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:37:02,864 clickhouse_migrate:101 [INFO]: Fetch table schema, cloudatlas.cloudatlas_user_local
2021-04-11 14:37:02,944 clickhouse_migrate:136 [INFO]: Table's schema CREATE TABLE cloudatlas.cloudatlas_user_local (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = MergeTree(dt, company_id, 8192)
2021-04-11 14:37:02,945 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE cloudatlas.cloudatlas_user_local (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = MergeTree(dt, company_id, 8192) 
2021-04-11 14:37:02,945 clickhouse_migrate:37 [INFO]: database : cloudatlas
2021-04-11 14:37:02,945 clickhouse_migrate:38 [INFO]: table : cloudatlas_user_local
2021-04-11 14:37:02,945 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_local on cluster replicated_stock (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = MergeTree(dt, company_id, 8192) is bad
2021-04-11 14:37:02,945 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_local on cluster replicated_stock (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = MergeTree(dt, company_id, 8192)
2021-04-11 14:37:02,946 clickhouse_migrate:139 [INFO]: Will construct table on target cluster
2021-04-11 14:37:02,946 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_local on cluster replicated_stock (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = MergeTree(dt, company_id, 8192)>, Ready Go !
2021-04-11 14:37:03,151 clickhouse_migrate:144 [INFO]: Will Create distributed Tables in cloudatlas
2021-04-11 14:37:03,151 clickhouse_migrate:149 [INFO]: distributed tables [u'cloudatlas_user', u'cloudatlas_user_group', u'dim_sku', u'trace_events'] in cloudatlas
2021-04-11 14:37:03,152 clickhouse_migrate:101 [INFO]: Fetch table schema, cloudatlas.cloudatlas_user
2021-04-11 14:37:03,234 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE cloudatlas.cloudatlas_user (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_local, company_id)
2021-04-11 14:37:03,234 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE cloudatlas.cloudatlas_user (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_local, company_id) 
2021-04-11 14:37:03,234 clickhouse_migrate:37 [INFO]: database : cloudatlas
2021-04-11 14:37:03,234 clickhouse_migrate:38 [INFO]: table : cloudatlas_user
2021-04-11 14:37:03,235 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user on cluster replicated_stock (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_local, company_id)
2021-04-11 14:37:03,235 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:03,235 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user on cluster replicated_stock (`company_id` Int32 COMMENT '门店id', `status` Int32 COMMENT '门店状态', `company_name` String COMMENT '门店名称', `phone` String COMMENT '门店负责人手机号', `company_create_time` Int32 COMMENT '门店创建时间', `city_id` Int32 COMMENT '城市id', `city_name` String COMMENT '城市名称', `sale_area_id` Int32 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区name', `first_order_time` Int32 COMMENT '第一次下单时间', `last_order_time` Int32 COMMENT '最后一次下单时间', `pre_order_time` Int32 COMMENT '倒数第二次下单时间', `from_last_order_days` Int32 COMMENT '距最后一次下单的天数', `yesterday_amount` Float32 COMMENT '昨日下单总额', `seven_days_amount` Float32 COMMENT '近7天下单总额', `seven_days_orderdays` Int32 COMMENT '近7天下单天数', `seven_days_pct` Float32 COMMENT '近7天客单价', `thirty_days_amount` Float32 COMMENT '近30天下单总额', `thirty_days_orderdays` Int32 COMMENT '近30天下单天数', `thirty_days_pct` Float32 COMMENT '近30天客单价', `pre_seven_days_amount` Float32 COMMENT '上7天下单总额', `pre_seven_days_orderdays` Int32 COMMENT '上7天下单天数', `pre_seven_days_pct` Float32 COMMENT '上7天客单价', `pre_thirty_days_amount` Float32 COMMENT '上30天下单总额', `pre_thirty_days_orderdays` Int32 COMMENT '上30天下单天数', `pre_thirty_days_pct` Float32 COMMENT '上30天客单价', `total_amount` Float32 COMMENT '总下单总额', `total_orderdays` Int32 COMMENT '总下单天数', `total_pct` Float32 COMMENT '总客单价', `contribution` Int32 COMMENT '贡献度(0无贡献,1低,2中低,3中,4中高,5高)', `lifecycle` Int32 COMMENT '生命周期(5周内活跃,4沉默,3睡眠,2流失,1未激活)', `recency` Int32 COMMENT '最近一次消费等级(根据距离上次下单天数计算 0:无等级,1：5-6天,2：3-4天,3：2天,4：1天,5：0天)', `frequency` Int32 COMMENT '消费频率等级(根据30天累计下单天数计算 0:无等级,1：0-5天,2：5-10天,3：10-17天,4：17-25天,5：25-30天)', `monetary` Int32 COMMENT '消费金额等级(根据30天内客单价计算 0:无等级,1：0-150元,2：150-300元,3：300-500元,4：500-800元,5：800+元)', `rfm` Int32 COMMENT 'rfm等级(根据rfm值计算 0:无等级,1挽留,2保持,3发展,4重要,5优质)', `nes` Int32 COMMENT 'nes标签,0： N(首配商户),1： E0（主力商户）, 2：S1（瞌睡商户），3: S2（半睡商户）,4:S3-1 8-30天未下单,5:S3-2 31-90天未下单,6:S3-3 大于90天未下单', `loyalty` Int32 COMMENT '忠诚度', `last_month_grade` Int32 COMMENT '上月权益等级（1普通、2白银、3黄金、4铂金）', `grade` Int32 COMMENT '本月等级（1普通、2白银、3黄金、4铂金）', `pricing_tag` Int32 COMMENT '定价标签', `regular_frequency` Int32 COMMENT '固定频率', `high_frequency` Int32 COMMENT '高频 频次', `high_frequency_first_date` Int32 COMMENT '首次日期', `high_frequency_end_date` Int32 COMMENT '最终日期', `customer_platform` Int32 COMMENT '平台类型 1 大客户 2 小客户 3 广告平台 4 合伙人', `customer_risk` Int32 COMMENT '商户风控 1：正常商户 2：疑似重复', `customer_belong` Int32 COMMENT '商户归属 1：销售 2：司机', `register_source` Int32 COMMENT '注册来源 1:IOS 2:android 3:微信 0：其它', `create_claim_id` Int32 COMMENT '创建销售ID 如果为 0 则 没有创建销售', `dt` Date) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_local, company_id)>, Ready Go !
2021-04-11 14:37:03,440 clickhouse_migrate:101 [INFO]: Fetch table schema, cloudatlas.cloudatlas_user_group
2021-04-11 14:37:03,517 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE cloudatlas.cloudatlas_user_group (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_group_local, rand())
2021-04-11 14:37:03,518 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE cloudatlas.cloudatlas_user_group (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_group_local, rand()) 
2021-04-11 14:37:03,518 clickhouse_migrate:37 [INFO]: database : cloudatlas
2021-04-11 14:37:03,518 clickhouse_migrate:38 [INFO]: table : cloudatlas_user_group
2021-04-11 14:37:03,518 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_group on cluster replicated_stock (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_group_local, rand())
2021-04-11 14:37:03,518 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:03,518 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS cloudatlas.cloudatlas_user_group on cluster replicated_stock (`uid` Int32, `group_id` Int64, `source_type` Int32) ENGINE = Distributed(stock, cloudatlas, cloudatlas_user_group_local, rand())>, Ready Go !
2021-04-11 14:37:03,713 clickhouse_migrate:101 [INFO]: Fetch table schema, cloudatlas.dim_sku
2021-04-11 14:37:03,793 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE cloudatlas.dim_sku (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192
2021-04-11 14:37:03,793 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE cloudatlas.dim_sku (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192 
2021-04-11 14:37:03,793 clickhouse_migrate:37 [INFO]: database : cloudatlas
2021-04-11 14:37:03,793 clickhouse_migrate:38 [INFO]: table : dim_sku
2021-04-11 14:37:03,793 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS cloudatlas.dim_sku on cluster replicated_stock (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192 is bad
2021-04-11 14:37:03,794 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS cloudatlas.dim_sku on cluster replicated_stock (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192
2021-04-11 14:37:03,794 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:03,794 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS cloudatlas.dim_sku on cluster replicated_stock (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:37:04,000 clickhouse_migrate:101 [INFO]: Fetch table schema, cloudatlas.trace_events
2021-04-11 14:37:04,116 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE cloudatlas.trace_events (`event_name` String, `alias_name` String, `spm` String, `c_t` Int32, `city_id` Int32, `area_id` Int32, `bu_id` Int32, `tid` String, `uid` Int32, `passport_id` Int64, `clienttype` Int32, `appversion` String, `app_id` Int32, `os` String, `ip` Int32, `page_id` Int32, `cms_id` Int32, `cms_name` String, `cms_page_module_id` Int32, `cms_page_module_name` String, `cms_module_id` Int32, `cms_module_name` String, `cms_module_element_code` String, `cms_item_id` Int32, `cms_item_pos` Int32, `big_activity_id` String, `cdd_pos` Int32, `search_from` String, `input_k` String, `k` String, `kid` String, `msg_id` String, `news_id` String, `order_id` Int32, `pos` Int32, `promote_type` String, `sku_id` Int32, `sku_name` String, `sku_pos` Int32, `ssu_id` Int32, `ssu_name` String, `ssu_pos` Int32, `tag` String, `type` String, `warehouse_id` Int32, `oiid` Int32, `pms_class1_id` Int32, `pms_class1_name` String, `pms_class2_id` Int32, `pms_class2_name` String, `sale_class1_id` Int32, `sale_class1_name` String, `sale_class2_id` Int32, `sale_class2_name` String, `bi_id` Int32, `bi_name` String, `ssu_num` Int32, `expect_pay_way` Int32, `order_money` Float64, `coupon_discount` Float64, `order_from` String, `channel` Int32, `task_id` Int32, `ad_position` String, `ad_info_id` String, `ad_tag` String, `hotword_value` String, `hotword_pos` String, `is_expand` Int32, `coupon_id` Int32, `key` String, `sug_key` String, `key_pos` Int32, `share_uid` Int32, `share_as` Int32, `exposure_channel` String, `exposure_page_id` Int32, `exposure_detail_id` Int32, `class1_id` Int32, `class2_id` Int32, `content` String, `class_id` Int32, `class_pos` Int32, `delivery_id` Int32, `phone` Int32, `result` Int32, `err_msg` String, `verify_code` Int32, `target_url` String, `from` String, `target` String, `refer_id` String, `object_value` String, `score` Float64, `addr` String, `activity_id` String, `feedback_id` String, `pack_id` Int32, `record_id` Int32, `channel_id` Int32, `prepay_amount` Float64, `group_buying_status` String, `goods_num` Int32, `total_amount` Float64, `param_name` String, `share_source` Int32, `format` String, `strategy` String, `reason` Int32, `fare_id` Int32, `order_status` Int32, `pop_id` Int32, `btn_location` Int32, `keyword` String, `is_selected` Int32, `login_method` Int32, `is_suggest` Int32, `status` Int32, `suggest_word` String, `suggest_pos` Int32, `company_class_id` Int32, `company_class_name` String, `testmxl` Int32, `return_num` Float64, `refund_method` String, `return_id` Int32, `return_status` String, `driver_name` String, `source_id` Int32, `payment_type` String, `order_type` String, `vendor_id` String, `sell_type` String, `pms_class3_id` String, `pms_class3_name` String, `organization_id` Int32, `amount_section` String, `isvip` Int32, `btn_pos` Int32, `class_province_id` Int32, `class_city_id` Int32, `class_area_id` Int32, `floor_area` String, `company_class1_id` Int32, `mix_rent` String, `max_rent` String, `sublet_shop_id` Int32, `id_type` Int32, `shop_close_type` Int32, `appeal_audit_status` Int32, `source_channel` String, `page_from` Int32, `class_street_id` Int32, `sublet_type` Int32, `sublet_vip` Int32, `order_trace_status` String, `show_map_point` Int32, `logistics_company_point` Int32, `is_current` Int32, `pid` String, `dt` Date, `cashier_type` Int32, `referrer` String, `test_version` String, `value` String, `hkey_pos` String, `banner_id` Int32, `is_invalid` Int32, `is_new` Int32, `distance` Int32, `member_benefit` Int32, `prime_type` Int32, `prime_level` Int32, `member_level` Int32, `searchword` String COMMENT '搜索词', `sort_type` Int32 COMMENT '排序方式', `dish_name` String COMMENT '菜品名称', `order_filter` String COMMENT '下单筛选', `recipe_id` String COMMENT '菜谱ID', `search_module_from` String COMMENT '搜索模块来源', `category1_id` Int32, `category2_name` String, `category1_name` String, `category2_id` Int32, `brand_name` String, `page_source` Int32 COMMENT '页面来源', `mgs_maintitle` String, `msg_subtitle` String, `msg_button` String, `msg_system_sign` String, `msg_model_id` Int32, `driver_phone` String, `window_content` String, `time_quantum` String, `popup_close` Int32, `white_screen_time` Int64, `ready_time` Int64, `all_load_time` Int64, `native_type` String, `business_type` String, `real_load_time` Int64, `cms_start_time` String, `cms_end_time` String, `open_time` Int64, `comp_maintype` Int32, `sku_tag` String COMMENT '商品标签', `sku_content` String COMMENT '文字评价内容', `serve_question` String COMMENT '问题', `serve_score` Int32 COMMENT '是否满意', `serve_tag` String COMMENT '标签词', `serve_content` String COMMENT '文字评价内容', `query_from` String COMMENT '搜索请求来源', `searchmode` String COMMENT '搜索方式', `ssu_price` Float64 COMMENT 'ssu金额', `ispop` Int32 COMMENT '是否是第三方', `food_type` Int32 COMMENT '食材类型', `top_tab` Int32 COMMENT '顶部tab', `rec_dish_name` String COMMENT '推荐菜品名称', `level` Int32 COMMENT '评价等级', `appraise_sku_num` Int32 COMMENT '菜品评价数量', `time` String COMMENT '评价时间', `from_sku_id` Int32 COMMENT '该商品详情页sku_id', `company_status_code` Int32 COMMENT '门店状态', `tag_word` String COMMENT '标签内容', `tag_pos` Int32 COMMENT '标签位置', `scene_status` Int32 COMMENT '场次状态', `scene_time` Int32 COMMENT '场次时间', `scene_id` Int32 COMMENT '场次ID', `real_order_money` Float64 COMMENT '下单金额（优惠后）', `order_weight` Float64 COMMENT '下单计价量', `filter_scene_id` Int32 COMMENT '筛选器场景ID', `company_phone` String COMMENT '门店注册电话', `receiver_phone` String COMMENT '收货人电话', `coupon_type` String COMMENT '优惠券类型', `source_type` Int32 COMMENT '个人中心子账号引导', `is_enable_ele` Int32 COMMENT '是否授权饿了么') ENGINE = Distributed(stock, cloudatlas, trace_events_local, rand())
2021-04-11 14:37:04,117 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE cloudatlas.trace_events (`event_name` String, `alias_name` String, `spm` String, `c_t` Int32, `city_id` Int32, `area_id` Int32, `bu_id` Int32, `tid` String, `uid` Int32, `passport_id` Int64, `clienttype` Int32, `appversion` String, `app_id` Int32, `os` String, `ip` Int32, `page_id` Int32, `cms_id` Int32, `cms_name` String, `cms_page_module_id` Int32, `cms_page_module_name` String, `cms_module_id` Int32, `cms_module_name` String, `cms_module_element_code` String, `cms_item_id` Int32, `cms_item_pos` Int32, `big_activity_id` String, `cdd_pos` Int32, `search_from` String, `input_k` String, `k` String, `kid` String, `msg_id` String, `news_id` String, `order_id` Int32, `pos` Int32, `promote_type` String, `sku_id` Int32, `sku_name` String, `sku_pos` Int32, `ssu_id` Int32, `ssu_name` String, `ssu_pos` Int32, `tag` String, `type` String, `warehouse_id` Int32, `oiid` Int32, `pms_class1_id` Int32, `pms_class1_name` String, `pms_class2_id` Int32, `pms_class2_name` String, `sale_class1_id` Int32, `sale_class1_name` String, `sale_class2_id` Int32, `sale_class2_name` String, `bi_id` Int32, `bi_name` String, `ssu_num` Int32, `expect_pay_way` Int32, `order_money` Float64, `coupon_discount` Float64, `order_from` String, `channel` Int32, `task_id` Int32, `ad_position` String, `ad_info_id` String, `ad_tag` String, `hotword_value` String, `hotword_pos` String, `is_expand` Int32, `coupon_id` Int32, `key` String, `sug_key` String, `key_pos` Int32, `share_uid` Int32, `share_as` Int32, `exposure_channel` String, `exposure_page_id` Int32, `exposure_detail_id` Int32, `class1_id` Int32, `class2_id` Int32, `content` String, `class_id` Int32, `class_pos` Int32, `delivery_id` Int32, `phone` Int32, `result` Int32, `err_msg` String, `verify_code` Int32, `target_url` String, `from` String, `target` String, `refer_id` String, `object_value` String, `score` Float64, `addr` String, `activity_id` String, `feedback_id` String, `pack_id` Int32, `record_id` Int32, `channel_id` Int32, `prepay_amount` Float64, `group_buying_status` String, `goods_num` Int32, `total_amount` Float64, `param_name` String, `share_source` Int32, `format` String, `strategy` String, `reason` Int32, `fare_id` Int32, `order_status` Int32, `pop_id` Int32, `btn_location` Int32, `keyword` String, `is_selected` Int32, `login_method` Int32, `is_suggest` Int32, `status` Int32, `suggest_word` String, `suggest_pos` Int32, `company_class_id` Int32, `company_class_name` String, `testmxl` Int32, `return_num` Float64, `refund_method` String, `return_id` Int32, `return_status` String, `driver_name` String, `source_id` Int32, `payment_type` String, `order_type` String, `vendor_id` String, `sell_type` String, `pms_class3_id` String, `pms_class3_name` String, `organization_id` Int32, `amount_section` String, `isvip` Int32, `btn_pos` Int32, `class_province_id` Int32, `class_city_id` Int32, `class_area_id` Int32, `floor_area` String, `company_class1_id` Int32, `mix_rent` String, `max_rent` String, `sublet_shop_id` Int32, `id_type` Int32, `shop_close_type` Int32, `appeal_audit_status` Int32, `source_channel` String, `page_from` Int32, `class_street_id` Int32, `sublet_type` Int32, `sublet_vip` Int32, `order_trace_status` String, `show_map_point` Int32, `logistics_company_point` Int32, `is_current` Int32, `pid` String, `dt` Date, `cashier_type` Int32, `referrer` String, `test_version` String, `value` String, `hkey_pos` String, `banner_id` Int32, `is_invalid` Int32, `is_new` Int32, `distance` Int32, `member_benefit` Int32, `prime_type` Int32, `prime_level` Int32, `member_level` Int32, `searchword` String COMMENT '搜索词', `sort_type` Int32 COMMENT '排序方式', `dish_name` String COMMENT '菜品名称', `order_filter` String COMMENT '下单筛选', `recipe_id` String COMMENT '菜谱ID', `search_module_from` String COMMENT '搜索模块来源', `category1_id` Int32, `category2_name` String, `category1_name` String, `category2_id` Int32, `brand_name` String, `page_source` Int32 COMMENT '页面来源', `mgs_maintitle` String, `msg_subtitle` String, `msg_button` String, `msg_system_sign` String, `msg_model_id` Int32, `driver_phone` String, `window_content` String, `time_quantum` String, `popup_close` Int32, `white_screen_time` Int64, `ready_time` Int64, `all_load_time` Int64, `native_type` String, `business_type` String, `real_load_time` Int64, `cms_start_time` String, `cms_end_time` String, `open_time` Int64, `comp_maintype` Int32, `sku_tag` String COMMENT '商品标签', `sku_content` String COMMENT '文字评价内容', `serve_question` String COMMENT '问题', `serve_score` Int32 COMMENT '是否满意', `serve_tag` String COMMENT '标签词', `serve_content` String COMMENT '文字评价内容', `query_from` String COMMENT '搜索请求来源', `searchmode` String COMMENT '搜索方式', `ssu_price` Float64 COMMENT 'ssu金额', `ispop` Int32 COMMENT '是否是第三方', `food_type` Int32 COMMENT '食材类型', `top_tab` Int32 COMMENT '顶部tab', `rec_dish_name` String COMMENT '推荐菜品名称', `level` Int32 COMMENT '评价等级', `appraise_sku_num` Int32 COMMENT '菜品评价数量', `time` String COMMENT '评价时间', `from_sku_id` Int32 COMMENT '该商品详情页sku_id', `company_status_code` Int32 COMMENT '门店状态', `tag_word` String COMMENT '标签内容', `tag_pos` Int32 COMMENT '标签位置', `scene_status` Int32 COMMENT '场次状态', `scene_time` Int32 COMMENT '场次时间', `scene_id` Int32 COMMENT '场次ID', `real_order_money` Float64 COMMENT '下单金额（优惠后）', `order_weight` Float64 COMMENT '下单计价量', `filter_scene_id` Int32 COMMENT '筛选器场景ID', `company_phone` String COMMENT '门店注册电话', `receiver_phone` String COMMENT '收货人电话', `coupon_type` String COMMENT '优惠券类型', `source_type` Int32 COMMENT '个人中心子账号引导', `is_enable_ele` Int32 COMMENT '是否授权饿了么') ENGINE = Distributed(stock, cloudatlas, trace_events_local, rand()) 
2021-04-11 14:37:04,117 clickhouse_migrate:37 [INFO]: database : cloudatlas
2021-04-11 14:37:04,117 clickhouse_migrate:38 [INFO]: table : trace_events
2021-04-11 14:37:04,117 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS cloudatlas.trace_events on cluster replicated_stock (`event_name` String, `alias_name` String, `spm` String, `c_t` Int32, `city_id` Int32, `area_id` Int32, `bu_id` Int32, `tid` String, `uid` Int32, `passport_id` Int64, `clienttype` Int32, `appversion` String, `app_id` Int32, `os` String, `ip` Int32, `page_id` Int32, `cms_id` Int32, `cms_name` String, `cms_page_module_id` Int32, `cms_page_module_name` String, `cms_module_id` Int32, `cms_module_name` String, `cms_module_element_code` String, `cms_item_id` Int32, `cms_item_pos` Int32, `big_activity_id` String, `cdd_pos` Int32, `search_from` String, `input_k` String, `k` String, `kid` String, `msg_id` String, `news_id` String, `order_id` Int32, `pos` Int32, `promote_type` String, `sku_id` Int32, `sku_name` String, `sku_pos` Int32, `ssu_id` Int32, `ssu_name` String, `ssu_pos` Int32, `tag` String, `type` String, `warehouse_id` Int32, `oiid` Int32, `pms_class1_id` Int32, `pms_class1_name` String, `pms_class2_id` Int32, `pms_class2_name` String, `sale_class1_id` Int32, `sale_class1_name` String, `sale_class2_id` Int32, `sale_class2_name` String, `bi_id` Int32, `bi_name` String, `ssu_num` Int32, `expect_pay_way` Int32, `order_money` Float64, `coupon_discount` Float64, `order_from` String, `channel` Int32, `task_id` Int32, `ad_position` String, `ad_info_id` String, `ad_tag` String, `hotword_value` String, `hotword_pos` String, `is_expand` Int32, `coupon_id` Int32, `key` String, `sug_key` String, `key_pos` Int32, `share_uid` Int32, `share_as` Int32, `exposure_channel` String, `exposure_page_id` Int32, `exposure_detail_id` Int32, `class1_id` Int32, `class2_id` Int32, `content` String, `class_id` Int32, `class_pos` Int32, `delivery_id` Int32, `phone` Int32, `result` Int32, `err_msg` String, `verify_code` Int32, `target_url` String, `from` String, `target` String, `refer_id` String, `object_value` String, `score` Float64, `addr` String, `activity_id` String, `feedback_id` String, `pack_id` Int32, `record_id` Int32, `channel_id` Int32, `prepay_amount` Float64, `group_buying_status` String, `goods_num` Int32, `total_amount` Float64, `param_name` String, `share_source` Int32, `format` String, `strategy` String, `reason` Int32, `fare_id` Int32, `order_status` Int32, `pop_id` Int32, `btn_location` Int32, `keyword` String, `is_selected` Int32, `login_method` Int32, `is_suggest` Int32, `status` Int32, `suggest_word` String, `suggest_pos` Int32, `company_class_id` Int32, `company_class_name` String, `testmxl` Int32, `return_num` Float64, `refund_method` String, `return_id` Int32, `return_status` String, `driver_name` String, `source_id` Int32, `payment_type` String, `order_type` String, `vendor_id` String, `sell_type` String, `pms_class3_id` String, `pms_class3_name` String, `organization_id` Int32, `amount_section` String, `isvip` Int32, `btn_pos` Int32, `class_province_id` Int32, `class_city_id` Int32, `class_area_id` Int32, `floor_area` String, `company_class1_id` Int32, `mix_rent` String, `max_rent` String, `sublet_shop_id` Int32, `id_type` Int32, `shop_close_type` Int32, `appeal_audit_status` Int32, `source_channel` String, `page_from` Int32, `class_street_id` Int32, `sublet_type` Int32, `sublet_vip` Int32, `order_trace_status` String, `show_map_point` Int32, `logistics_company_point` Int32, `is_current` Int32, `pid` String, `dt` Date, `cashier_type` Int32, `referrer` String, `test_version` String, `value` String, `hkey_pos` String, `banner_id` Int32, `is_invalid` Int32, `is_new` Int32, `distance` Int32, `member_benefit` Int32, `prime_type` Int32, `prime_level` Int32, `member_level` Int32, `searchword` String COMMENT '搜索词', `sort_type` Int32 COMMENT '排序方式', `dish_name` String COMMENT '菜品名称', `order_filter` String COMMENT '下单筛选', `recipe_id` String COMMENT '菜谱ID', `search_module_from` String COMMENT '搜索模块来源', `category1_id` Int32, `category2_name` String, `category1_name` String, `category2_id` Int32, `brand_name` String, `page_source` Int32 COMMENT '页面来源', `mgs_maintitle` String, `msg_subtitle` String, `msg_button` String, `msg_system_sign` String, `msg_model_id` Int32, `driver_phone` String, `window_content` String, `time_quantum` String, `popup_close` Int32, `white_screen_time` Int64, `ready_time` Int64, `all_load_time` Int64, `native_type` String, `business_type` String, `real_load_time` Int64, `cms_start_time` String, `cms_end_time` String, `open_time` Int64, `comp_maintype` Int32, `sku_tag` String COMMENT '商品标签', `sku_content` String COMMENT '文字评价内容', `serve_question` String COMMENT '问题', `serve_score` Int32 COMMENT '是否满意', `serve_tag` String COMMENT '标签词', `serve_content` String COMMENT '文字评价内容', `query_from` String COMMENT '搜索请求来源', `searchmode` String COMMENT '搜索方式', `ssu_price` Float64 COMMENT 'ssu金额', `ispop` Int32 COMMENT '是否是第三方', `food_type` Int32 COMMENT '食材类型', `top_tab` Int32 COMMENT '顶部tab', `rec_dish_name` String COMMENT '推荐菜品名称', `level` Int32 COMMENT '评价等级', `appraise_sku_num` Int32 COMMENT '菜品评价数量', `time` String COMMENT '评价时间', `from_sku_id` Int32 COMMENT '该商品详情页sku_id', `company_status_code` Int32 COMMENT '门店状态', `tag_word` String COMMENT '标签内容', `tag_pos` Int32 COMMENT '标签位置', `scene_status` Int32 COMMENT '场次状态', `scene_time` Int32 COMMENT '场次时间', `scene_id` Int32 COMMENT '场次ID', `real_order_money` Float64 COMMENT '下单金额（优惠后）', `order_weight` Float64 COMMENT '下单计价量', `filter_scene_id` Int32 COMMENT '筛选器场景ID', `company_phone` String COMMENT '门店注册电话', `receiver_phone` String COMMENT '收货人电话', `coupon_type` String COMMENT '优惠券类型', `source_type` Int32 COMMENT '个人中心子账号引导', `is_enable_ele` Int32 COMMENT '是否授权饿了么') ENGINE = Distributed(stock, cloudatlas, trace_events_local, rand())
2021-04-11 14:37:04,118 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:04,118 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS cloudatlas.trace_events on cluster replicated_stock (`event_name` String, `alias_name` String, `spm` String, `c_t` Int32, `city_id` Int32, `area_id` Int32, `bu_id` Int32, `tid` String, `uid` Int32, `passport_id` Int64, `clienttype` Int32, `appversion` String, `app_id` Int32, `os` String, `ip` Int32, `page_id` Int32, `cms_id` Int32, `cms_name` String, `cms_page_module_id` Int32, `cms_page_module_name` String, `cms_module_id` Int32, `cms_module_name` String, `cms_module_element_code` String, `cms_item_id` Int32, `cms_item_pos` Int32, `big_activity_id` String, `cdd_pos` Int32, `search_from` String, `input_k` String, `k` String, `kid` String, `msg_id` String, `news_id` String, `order_id` Int32, `pos` Int32, `promote_type` String, `sku_id` Int32, `sku_name` String, `sku_pos` Int32, `ssu_id` Int32, `ssu_name` String, `ssu_pos` Int32, `tag` String, `type` String, `warehouse_id` Int32, `oiid` Int32, `pms_class1_id` Int32, `pms_class1_name` String, `pms_class2_id` Int32, `pms_class2_name` String, `sale_class1_id` Int32, `sale_class1_name` String, `sale_class2_id` Int32, `sale_class2_name` String, `bi_id` Int32, `bi_name` String, `ssu_num` Int32, `expect_pay_way` Int32, `order_money` Float64, `coupon_discount` Float64, `order_from` String, `channel` Int32, `task_id` Int32, `ad_position` String, `ad_info_id` String, `ad_tag` String, `hotword_value` String, `hotword_pos` String, `is_expand` Int32, `coupon_id` Int32, `key` String, `sug_key` String, `key_pos` Int32, `share_uid` Int32, `share_as` Int32, `exposure_channel` String, `exposure_page_id` Int32, `exposure_detail_id` Int32, `class1_id` Int32, `class2_id` Int32, `content` String, `class_id` Int32, `class_pos` Int32, `delivery_id` Int32, `phone` Int32, `result` Int32, `err_msg` String, `verify_code` Int32, `target_url` String, `from` String, `target` String, `refer_id` String, `object_value` String, `score` Float64, `addr` String, `activity_id` String, `feedback_id` String, `pack_id` Int32, `record_id` Int32, `channel_id` Int32, `prepay_amount` Float64, `group_buying_status` String, `goods_num` Int32, `total_amount` Float64, `param_name` String, `share_source` Int32, `format` String, `strategy` String, `reason` Int32, `fare_id` Int32, `order_status` Int32, `pop_id` Int32, `btn_location` Int32, `keyword` String, `is_selected` Int32, `login_method` Int32, `is_suggest` Int32, `status` Int32, `suggest_word` String, `suggest_pos` Int32, `company_class_id` Int32, `company_class_name` String, `testmxl` Int32, `return_num` Float64, `refund_method` String, `return_id` Int32, `return_status` String, `driver_name` String, `source_id` Int32, `payment_type` String, `order_type` String, `vendor_id` String, `sell_type` String, `pms_class3_id` String, `pms_class3_name` String, `organization_id` Int32, `amount_section` String, `isvip` Int32, `btn_pos` Int32, `class_province_id` Int32, `class_city_id` Int32, `class_area_id` Int32, `floor_area` String, `company_class1_id` Int32, `mix_rent` String, `max_rent` String, `sublet_shop_id` Int32, `id_type` Int32, `shop_close_type` Int32, `appeal_audit_status` Int32, `source_channel` String, `page_from` Int32, `class_street_id` Int32, `sublet_type` Int32, `sublet_vip` Int32, `order_trace_status` String, `show_map_point` Int32, `logistics_company_point` Int32, `is_current` Int32, `pid` String, `dt` Date, `cashier_type` Int32, `referrer` String, `test_version` String, `value` String, `hkey_pos` String, `banner_id` Int32, `is_invalid` Int32, `is_new` Int32, `distance` Int32, `member_benefit` Int32, `prime_type` Int32, `prime_level` Int32, `member_level` Int32, `searchword` String COMMENT '搜索词', `sort_type` Int32 COMMENT '排序方式', `dish_name` String COMMENT '菜品名称', `order_filter` String COMMENT '下单筛选', `recipe_id` String COMMENT '菜谱ID', `search_module_from` String COMMENT '搜索模块来源', `category1_id` Int32, `category2_name` String, `category1_name` String, `category2_id` Int32, `brand_name` String, `page_source` Int32 COMMENT '页面来源', `mgs_maintitle` String, `msg_subtitle` String, `msg_button` String, `msg_system_sign` String, `msg_model_id` Int32, `driver_phone` String, `window_content` String, `time_quantum` String, `popup_close` Int32, `white_screen_time` Int64, `ready_time` Int64, `all_load_time` Int64, `native_type` String, `business_type` String, `real_load_time` Int64, `cms_start_time` String, `cms_end_time` String, `open_time` Int64, `comp_maintype` Int32, `sku_tag` String COMMENT '商品标签', `sku_content` String COMMENT '文字评价内容', `serve_question` String COMMENT '问题', `serve_score` Int32 COMMENT '是否满意', `serve_tag` String COMMENT '标签词', `serve_content` String COMMENT '文字评价内容', `query_from` String COMMENT '搜索请求来源', `searchmode` String COMMENT '搜索方式', `ssu_price` Float64 COMMENT 'ssu金额', `ispop` Int32 COMMENT '是否是第三方', `food_type` Int32 COMMENT '食材类型', `top_tab` Int32 COMMENT '顶部tab', `rec_dish_name` String COMMENT '推荐菜品名称', `level` Int32 COMMENT '评价等级', `appraise_sku_num` Int32 COMMENT '菜品评价数量', `time` String COMMENT '评价时间', `from_sku_id` Int32 COMMENT '该商品详情页sku_id', `company_status_code` Int32 COMMENT '门店状态', `tag_word` String COMMENT '标签内容', `tag_pos` Int32 COMMENT '标签位置', `scene_status` Int32 COMMENT '场次状态', `scene_time` Int32 COMMENT '场次时间', `scene_id` Int32 COMMENT '场次ID', `real_order_money` Float64 COMMENT '下单金额（优惠后）', `order_weight` Float64 COMMENT '下单计价量', `filter_scene_id` Int32 COMMENT '筛选器场景ID', `company_phone` String COMMENT '门店注册电话', `receiver_phone` String COMMENT '收货人电话', `coupon_type` String COMMENT '优惠券类型', `source_type` Int32 COMMENT '个人中心子账号引导', `is_enable_ele` Int32 COMMENT '是否授权饿了么') ENGINE = Distributed(stock, cloudatlas, trace_events_local, rand())>, Ready Go !
2021-04-11 14:37:04,500 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : []
2021-04-11 14:37:04,500 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : []
2021-04-11 14:37:04,501 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : []
2021-04-11 14:37:04,501 clickhouse_migrate:131 [INFO]: local tables [] in csp
2021-04-11 14:37:04,501 clickhouse_migrate:144 [INFO]: Will Create distributed Tables in csp
2021-04-11 14:37:04,501 clickhouse_migrate:149 [INFO]: distributed tables [] in csp
2021-04-11 14:37:04,657 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : []
2021-04-11 14:37:04,658 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : []
2021-04-11 14:37:04,658 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : []
2021-04-11 14:37:04,658 clickhouse_migrate:131 [INFO]: local tables [] in customer_center
2021-04-11 14:37:04,658 clickhouse_migrate:144 [INFO]: Will Create distributed Tables in customer_center
2021-04-11 14:37:04,658 clickhouse_migrate:149 [INFO]: distributed tables [] in customer_center
2021-04-11 14:37:04,811 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : [u'company_retention_rate_ck', u'dws_ord_oi_all_process_detail', u'dws_ord_oi_all_process_detail_clusterd', u'etl_dwd_ord_order_detail_rt', u'm4', u'm_local_test', u'm_test', u'm_u', u'm_u_local', u'ontime_all', u'ontime_local', u'result', u'stock', u'stock1', u'stock2', u'test1', u'test2', u'test3']
2021-04-11 14:37:04,812 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : [u'm_local_test', u'm_u_local', u'ontime_local']
2021-04-11 14:37:04,812 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : [u'company_retention_rate_ck', u'dws_ord_oi_all_process_detail', u'dws_ord_oi_all_process_detail_clusterd', u'etl_dwd_ord_order_detail_rt', u'm4', u'm_test', u'm_u', u'ontime_all', u'result', u'stock', u'stock1', u'stock2', u'test1', u'test2', u'test3']
2021-04-11 14:37:04,812 clickhouse_migrate:131 [INFO]: local tables [u'm_local_test', u'm_u_local', u'ontime_local'] in default
2021-04-11 14:37:04,812 clickhouse_migrate:101 [INFO]: Fetch table schema, default.m_local_test
2021-04-11 14:37:04,889 clickhouse_migrate:136 [INFO]: Table's schema CREATE TABLE default.m_local_test (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = MergeTree() PARTITION BY dt ORDER BY uid SETTINGS index_granularity = 8192
2021-04-11 14:37:04,889 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.m_local_test (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = MergeTree() PARTITION BY dt ORDER BY uid SETTINGS index_granularity = 8192 
2021-04-11 14:37:04,889 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:04,889 clickhouse_migrate:38 [INFO]: table : m_local_test
2021-04-11 14:37:04,889 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.m_local_test on cluster replicated_stock (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = MergeTree() PARTITION BY dt ORDER BY uid SETTINGS index_granularity = 8192 is bad
2021-04-11 14:37:04,889 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.m_local_test on cluster replicated_stock (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = MergeTree() PARTITION BY dt ORDER BY uid SETTINGS index_granularity = 8192
2021-04-11 14:37:04,890 clickhouse_migrate:139 [INFO]: Will construct table on target cluster
2021-04-11 14:37:04,890 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.m_local_test on cluster replicated_stock (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = MergeTree() PARTITION BY dt ORDER BY uid SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:37:05,087 clickhouse_migrate:101 [INFO]: Fetch table schema, default.m_u_local
2021-04-11 14:37:05,165 clickhouse_migrate:136 [INFO]: Table's schema CREATE TABLE default.m_u_local (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = MergeTree() PARTITION BY dt ORDER BY company_id SETTINGS index_granularity = 8192
2021-04-11 14:37:05,165 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.m_u_local (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = MergeTree() PARTITION BY dt ORDER BY company_id SETTINGS index_granularity = 8192 
2021-04-11 14:37:05,165 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:05,165 clickhouse_migrate:38 [INFO]: table : m_u_local
2021-04-11 14:37:05,166 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.m_u_local on cluster replicated_stock (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = MergeTree() PARTITION BY dt ORDER BY company_id SETTINGS index_granularity = 8192 is bad
2021-04-11 14:37:05,166 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.m_u_local on cluster replicated_stock (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = MergeTree() PARTITION BY dt ORDER BY company_id SETTINGS index_granularity = 8192
2021-04-11 14:37:05,166 clickhouse_migrate:139 [INFO]: Will construct table on target cluster
2021-04-11 14:37:05,166 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.m_u_local on cluster replicated_stock (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = MergeTree() PARTITION BY dt ORDER BY company_id SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:37:05,366 clickhouse_migrate:101 [INFO]: Fetch table schema, default.ontime_local
2021-04-11 14:37:05,453 clickhouse_migrate:136 [INFO]: Table's schema CREATE TABLE default.ontime_local (`FlightDate` Date, `Year` UInt16) ENGINE = MergeTree(FlightDate, (Year, FlightDate), 8192)
2021-04-11 14:37:05,453 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.ontime_local (`FlightDate` Date, `Year` UInt16) ENGINE = MergeTree(FlightDate, (Year, FlightDate), 8192) 
2021-04-11 14:37:05,453 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:05,453 clickhouse_migrate:38 [INFO]: table : ontime_local
2021-04-11 14:37:05,453 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.ontime_local on cluster replicated_stock (`FlightDate` Date, `Year` UInt16) ENGINE = MergeTree(FlightDate, (Year, FlightDate), 8192) is bad
2021-04-11 14:37:05,453 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.ontime_local on cluster replicated_stock (`FlightDate` Date, `Year` UInt16) ENGINE = MergeTree(FlightDate, (Year, FlightDate), 8192)
2021-04-11 14:37:05,453 clickhouse_migrate:139 [INFO]: Will construct table on target cluster
2021-04-11 14:37:05,454 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.ontime_local on cluster replicated_stock (`FlightDate` Date, `Year` UInt16) ENGINE = MergeTree(FlightDate, (Year, FlightDate), 8192)>, Ready Go !
2021-04-11 14:37:05,650 clickhouse_migrate:144 [INFO]: Will Create distributed Tables in default
2021-04-11 14:37:05,650 clickhouse_migrate:149 [INFO]: distributed tables [u'company_retention_rate_ck', u'dws_ord_oi_all_process_detail', u'dws_ord_oi_all_process_detail_clusterd', u'etl_dwd_ord_order_detail_rt', u'm4', u'm_test', u'm_u', u'ontime_all', u'result', u'stock', u'stock1', u'stock2', u'test1', u'test2', u'test3'] in default
2021-04-11 14:37:05,651 clickhouse_migrate:101 [INFO]: Fetch table schema, default.company_retention_rate_ck
2021-04-11 14:37:05,728 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.company_retention_rate_ck (`company_id` Int32, `bi_id` Int32, `sale_area_id` Int32, `warehouse_id` Int32, `order_datekey` Date) ENGINE = MergeTree PARTITION BY order_datekey ORDER BY (company_id, bi_id, sale_area_id, order_datekey) SAMPLE BY company_id SETTINGS index_granularity = 8192
2021-04-11 14:37:05,728 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.company_retention_rate_ck (`company_id` Int32, `bi_id` Int32, `sale_area_id` Int32, `warehouse_id` Int32, `order_datekey` Date) ENGINE = MergeTree PARTITION BY order_datekey ORDER BY (company_id, bi_id, sale_area_id, order_datekey) SAMPLE BY company_id SETTINGS index_granularity = 8192 
2021-04-11 14:37:05,728 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:05,729 clickhouse_migrate:38 [INFO]: table : company_retention_rate_ck
2021-04-11 14:37:05,729 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.company_retention_rate_ck on cluster replicated_stock (`company_id` Int32, `bi_id` Int32, `sale_area_id` Int32, `warehouse_id` Int32, `order_datekey` Date) ENGINE = MergeTree PARTITION BY order_datekey ORDER BY (company_id, bi_id, sale_area_id, order_datekey) SAMPLE BY company_id SETTINGS index_granularity = 8192 is bad
2021-04-11 14:37:05,729 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.company_retention_rate_ck on cluster replicated_stock (`company_id` Int32, `bi_id` Int32, `sale_area_id` Int32, `warehouse_id` Int32, `order_datekey` Date) ENGINE = MergeTree PARTITION BY order_datekey ORDER BY (company_id, bi_id, sale_area_id, order_datekey) SAMPLE BY company_id SETTINGS index_granularity = 8192
2021-04-11 14:37:05,729 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:05,729 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.company_retention_rate_ck on cluster replicated_stock (`company_id` Int32, `bi_id` Int32, `sale_area_id` Int32, `warehouse_id` Int32, `order_datekey` Date) ENGINE = MergeTree PARTITION BY order_datekey ORDER BY (company_id, bi_id, sale_area_id, order_datekey) SAMPLE BY company_id SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:37:05,925 clickhouse_migrate:101 [INFO]: Fetch table schema, default.dws_ord_oi_all_process_detail
2021-04-11 14:37:06,006 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.dws_ord_oi_all_process_detail (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = MergeTree(datekey, (company_id, class1_id), 8192)
2021-04-11 14:37:06,007 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.dws_ord_oi_all_process_detail (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = MergeTree(datekey, (company_id, class1_id), 8192) 
2021-04-11 14:37:06,007 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:06,007 clickhouse_migrate:38 [INFO]: table : dws_ord_oi_all_process_detail
2021-04-11 14:37:06,007 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.dws_ord_oi_all_process_detail on cluster replicated_stock (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = MergeTree(datekey, (company_id, class1_id), 8192) is bad
2021-04-11 14:37:06,007 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.dws_ord_oi_all_process_detail on cluster replicated_stock (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = MergeTree(datekey, (company_id, class1_id), 8192)
2021-04-11 14:37:06,007 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:06,007 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.dws_ord_oi_all_process_detail on cluster replicated_stock (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = MergeTree(datekey, (company_id, class1_id), 8192)>, Ready Go !
2021-04-11 14:37:06,210 clickhouse_migrate:101 [INFO]: Fetch table schema, default.dws_ord_oi_all_process_detail_clusterd
2021-04-11 14:37:06,287 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.dws_ord_oi_all_process_detail_clusterd (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = Distributed(stock, default, dws_ord_oi_all_process_detail, company_id)
2021-04-11 14:37:06,287 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.dws_ord_oi_all_process_detail_clusterd (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = Distributed(stock, default, dws_ord_oi_all_process_detail, company_id) 
2021-04-11 14:37:06,287 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:06,287 clickhouse_migrate:38 [INFO]: table : dws_ord_oi_all_process_detail_clusterd
2021-04-11 14:37:06,287 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.dws_ord_oi_all_process_detail_clusterd on cluster replicated_stock (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = Distributed(stock, default, dws_ord_oi_all_process_detail, company_id)
2021-04-11 14:37:06,288 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:06,288 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.dws_ord_oi_all_process_detail_clusterd on cluster replicated_stock (`datekey` Date, `week_begin_datekey` UInt32, `month_begin_datekey` UInt32, `country_id` UInt64, `country_name` FixedString(200), `big_area_id` Int64, `big_area_name` FixedString(200), `city_id` Int64, `city_name` FixedString(200), `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `sale_area_id` Int64, `order_id` Int64, `sku_id` Int64, `sale_type` Int64, `order_money` Float32, `company_id` Int64, `real_money` Float32, `order_time` Int64, `dt` UInt32) ENGINE = Distributed(stock, default, dws_ord_oi_all_process_detail, company_id)>, Ready Go !
2021-04-11 14:37:06,488 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:37:06,488 clickhouse_migrate:101 [INFO]: Fetch table schema, default.etl_dwd_ord_order_detail_rt
2021-04-11 14:37:06,567 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.etl_dwd_ord_order_detail_rt (`order_datekey` Int64, `oiid` Int64, `order_id` Int64, `ssu_id` Int64, `sku_id` Int64, `company_id` Int64, `company_sku_str_id` String, `company_sku_id` Int64, `order_status` Int64, `ssu_format` String, `ssu_brand` String, `sku_format` String, `sku_level` String, `sku_unit` String, `sku_price_unit` String, `tax_rate` Float64, `num` Float64, `ssu_price` Float64, `raw_unit_price` Float64, `unit_price` Float64, `unit_sku_num` Float64, `unit_price_num` Float64, `order_money` Float64, `order_weight` Float64, `real_price` Float64, `real_order_money` Float64, `promotion_type` Int64, `promotion_id` Int64, `coupon_discount` Float64, `promotion_discount` Float64, `total_discount` Float64, `delivery_time` Int64, `c_t` Int64, `u_t` Int64, `lock_goods_split_c_t` Int64, `expect_receive_time` String, `is_deleted` Int64, `sale_area_id` Int64, `detail_city_id` Int64, `delivery_area_id` Int64, `warehouse_id` Int64, `channel` Int64, `owner_id` Int64, `pop_flag` Int64, `saleman_id` Int64, `order_from` Int64, `payment_type` Int64, `order_type` Int64, `delivery_date_type` Int64, `trade_type` Int64, `source` Int64, `parent_id` Int64, `user_id` Int64, `sell_type` Int64, `customer_type` Int64, `sale_type_3` Int64, `sale_type_2` Int64, `sale_type` Int64, `city_flag` Int64, `claim_op_bd_id` Int64, `tag` Int64, `subtag` Int64, `first_order_datekey` Int64, `all_new_company_flag` Int64, `last_interval_days` Int64, `all_revive_company_flag` Int64, `line_first_order_datekey` Int64, `line_new_company_flag` Int64, `line_last_interval_days` Int64, `line_revive_company_flag` Int64, `line_id` Int64, `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `net_weight` Float64, `physical_count` Float64, `big_area_id` Int64, `city_id` Int64, `zhucheng_id` Int64, `zhucheng_level` Int64, `cm_area_id` Int64, `g_business_flag` Int64, `td_country_id` Int64, `td_id` Int64, `qzq_id` Int64, `c_big_area_id` Int64, `l_big_area_id` Int64, `nc_city_id` Int64, `g_satellite_big_area_id` Int64, `g_satellite_sub_area_id` Int64, `g_province_id` Int64, `g_cm_area_id` Int64, `v` Int64) ENGINE = Memory
2021-04-11 14:37:06,567 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.etl_dwd_ord_order_detail_rt (`order_datekey` Int64, `oiid` Int64, `order_id` Int64, `ssu_id` Int64, `sku_id` Int64, `company_id` Int64, `company_sku_str_id` String, `company_sku_id` Int64, `order_status` Int64, `ssu_format` String, `ssu_brand` String, `sku_format` String, `sku_level` String, `sku_unit` String, `sku_price_unit` String, `tax_rate` Float64, `num` Float64, `ssu_price` Float64, `raw_unit_price` Float64, `unit_price` Float64, `unit_sku_num` Float64, `unit_price_num` Float64, `order_money` Float64, `order_weight` Float64, `real_price` Float64, `real_order_money` Float64, `promotion_type` Int64, `promotion_id` Int64, `coupon_discount` Float64, `promotion_discount` Float64, `total_discount` Float64, `delivery_time` Int64, `c_t` Int64, `u_t` Int64, `lock_goods_split_c_t` Int64, `expect_receive_time` String, `is_deleted` Int64, `sale_area_id` Int64, `detail_city_id` Int64, `delivery_area_id` Int64, `warehouse_id` Int64, `channel` Int64, `owner_id` Int64, `pop_flag` Int64, `saleman_id` Int64, `order_from` Int64, `payment_type` Int64, `order_type` Int64, `delivery_date_type` Int64, `trade_type` Int64, `source` Int64, `parent_id` Int64, `user_id` Int64, `sell_type` Int64, `customer_type` Int64, `sale_type_3` Int64, `sale_type_2` Int64, `sale_type` Int64, `city_flag` Int64, `claim_op_bd_id` Int64, `tag` Int64, `subtag` Int64, `first_order_datekey` Int64, `all_new_company_flag` Int64, `last_interval_days` Int64, `all_revive_company_flag` Int64, `line_first_order_datekey` Int64, `line_new_company_flag` Int64, `line_last_interval_days` Int64, `line_revive_company_flag` Int64, `line_id` Int64, `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `net_weight` Float64, `physical_count` Float64, `big_area_id` Int64, `city_id` Int64, `zhucheng_id` Int64, `zhucheng_level` Int64, `cm_area_id` Int64, `g_business_flag` Int64, `td_country_id` Int64, `td_id` Int64, `qzq_id` Int64, `c_big_area_id` Int64, `l_big_area_id` Int64, `nc_city_id` Int64, `g_satellite_big_area_id` Int64, `g_satellite_sub_area_id` Int64, `g_province_id` Int64, `g_cm_area_id` Int64, `v` Int64) ENGINE = Memory 
2021-04-11 14:37:06,567 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:06,568 clickhouse_migrate:38 [INFO]: table : etl_dwd_ord_order_detail_rt
2021-04-11 14:37:06,568 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.etl_dwd_ord_order_detail_rt on cluster replicated_stock (`order_datekey` Int64, `oiid` Int64, `order_id` Int64, `ssu_id` Int64, `sku_id` Int64, `company_id` Int64, `company_sku_str_id` String, `company_sku_id` Int64, `order_status` Int64, `ssu_format` String, `ssu_brand` String, `sku_format` String, `sku_level` String, `sku_unit` String, `sku_price_unit` String, `tax_rate` Float64, `num` Float64, `ssu_price` Float64, `raw_unit_price` Float64, `unit_price` Float64, `unit_sku_num` Float64, `unit_price_num` Float64, `order_money` Float64, `order_weight` Float64, `real_price` Float64, `real_order_money` Float64, `promotion_type` Int64, `promotion_id` Int64, `coupon_discount` Float64, `promotion_discount` Float64, `total_discount` Float64, `delivery_time` Int64, `c_t` Int64, `u_t` Int64, `lock_goods_split_c_t` Int64, `expect_receive_time` String, `is_deleted` Int64, `sale_area_id` Int64, `detail_city_id` Int64, `delivery_area_id` Int64, `warehouse_id` Int64, `channel` Int64, `owner_id` Int64, `pop_flag` Int64, `saleman_id` Int64, `order_from` Int64, `payment_type` Int64, `order_type` Int64, `delivery_date_type` Int64, `trade_type` Int64, `source` Int64, `parent_id` Int64, `user_id` Int64, `sell_type` Int64, `customer_type` Int64, `sale_type_3` Int64, `sale_type_2` Int64, `sale_type` Int64, `city_flag` Int64, `claim_op_bd_id` Int64, `tag` Int64, `subtag` Int64, `first_order_datekey` Int64, `all_new_company_flag` Int64, `last_interval_days` Int64, `all_revive_company_flag` Int64, `line_first_order_datekey` Int64, `line_new_company_flag` Int64, `line_last_interval_days` Int64, `line_revive_company_flag` Int64, `line_id` Int64, `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `net_weight` Float64, `physical_count` Float64, `big_area_id` Int64, `city_id` Int64, `zhucheng_id` Int64, `zhucheng_level` Int64, `cm_area_id` Int64, `g_business_flag` Int64, `td_country_id` Int64, `td_id` Int64, `qzq_id` Int64, `c_big_area_id` Int64, `l_big_area_id` Int64, `nc_city_id` Int64, `g_satellite_big_area_id` Int64, `g_satellite_sub_area_id` Int64, `g_province_id` Int64, `g_cm_area_id` Int64, `v` Int64) ENGINE = Memory is bad
2021-04-11 14:37:06,568 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.etl_dwd_ord_order_detail_rt on cluster replicated_stock (`order_datekey` Int64, `oiid` Int64, `order_id` Int64, `ssu_id` Int64, `sku_id` Int64, `company_id` Int64, `company_sku_str_id` String, `company_sku_id` Int64, `order_status` Int64, `ssu_format` String, `ssu_brand` String, `sku_format` String, `sku_level` String, `sku_unit` String, `sku_price_unit` String, `tax_rate` Float64, `num` Float64, `ssu_price` Float64, `raw_unit_price` Float64, `unit_price` Float64, `unit_sku_num` Float64, `unit_price_num` Float64, `order_money` Float64, `order_weight` Float64, `real_price` Float64, `real_order_money` Float64, `promotion_type` Int64, `promotion_id` Int64, `coupon_discount` Float64, `promotion_discount` Float64, `total_discount` Float64, `delivery_time` Int64, `c_t` Int64, `u_t` Int64, `lock_goods_split_c_t` Int64, `expect_receive_time` String, `is_deleted` Int64, `sale_area_id` Int64, `detail_city_id` Int64, `delivery_area_id` Int64, `warehouse_id` Int64, `channel` Int64, `owner_id` Int64, `pop_flag` Int64, `saleman_id` Int64, `order_from` Int64, `payment_type` Int64, `order_type` Int64, `delivery_date_type` Int64, `trade_type` Int64, `source` Int64, `parent_id` Int64, `user_id` Int64, `sell_type` Int64, `customer_type` Int64, `sale_type_3` Int64, `sale_type_2` Int64, `sale_type` Int64, `city_flag` Int64, `claim_op_bd_id` Int64, `tag` Int64, `subtag` Int64, `first_order_datekey` Int64, `all_new_company_flag` Int64, `last_interval_days` Int64, `all_revive_company_flag` Int64, `line_first_order_datekey` Int64, `line_new_company_flag` Int64, `line_last_interval_days` Int64, `line_revive_company_flag` Int64, `line_id` Int64, `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `net_weight` Float64, `physical_count` Float64, `big_area_id` Int64, `city_id` Int64, `zhucheng_id` Int64, `zhucheng_level` Int64, `cm_area_id` Int64, `g_business_flag` Int64, `td_country_id` Int64, `td_id` Int64, `qzq_id` Int64, `c_big_area_id` Int64, `l_big_area_id` Int64, `nc_city_id` Int64, `g_satellite_big_area_id` Int64, `g_satellite_sub_area_id` Int64, `g_province_id` Int64, `g_cm_area_id` Int64, `v` Int64) ENGINE = Memory
2021-04-11 14:37:06,568 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:06,568 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.etl_dwd_ord_order_detail_rt on cluster replicated_stock (`order_datekey` Int64, `oiid` Int64, `order_id` Int64, `ssu_id` Int64, `sku_id` Int64, `company_id` Int64, `company_sku_str_id` String, `company_sku_id` Int64, `order_status` Int64, `ssu_format` String, `ssu_brand` String, `sku_format` String, `sku_level` String, `sku_unit` String, `sku_price_unit` String, `tax_rate` Float64, `num` Float64, `ssu_price` Float64, `raw_unit_price` Float64, `unit_price` Float64, `unit_sku_num` Float64, `unit_price_num` Float64, `order_money` Float64, `order_weight` Float64, `real_price` Float64, `real_order_money` Float64, `promotion_type` Int64, `promotion_id` Int64, `coupon_discount` Float64, `promotion_discount` Float64, `total_discount` Float64, `delivery_time` Int64, `c_t` Int64, `u_t` Int64, `lock_goods_split_c_t` Int64, `expect_receive_time` String, `is_deleted` Int64, `sale_area_id` Int64, `detail_city_id` Int64, `delivery_area_id` Int64, `warehouse_id` Int64, `channel` Int64, `owner_id` Int64, `pop_flag` Int64, `saleman_id` Int64, `order_from` Int64, `payment_type` Int64, `order_type` Int64, `delivery_date_type` Int64, `trade_type` Int64, `source` Int64, `parent_id` Int64, `user_id` Int64, `sell_type` Int64, `customer_type` Int64, `sale_type_3` Int64, `sale_type_2` Int64, `sale_type` Int64, `city_flag` Int64, `claim_op_bd_id` Int64, `tag` Int64, `subtag` Int64, `first_order_datekey` Int64, `all_new_company_flag` Int64, `last_interval_days` Int64, `all_revive_company_flag` Int64, `line_first_order_datekey` Int64, `line_new_company_flag` Int64, `line_last_interval_days` Int64, `line_revive_company_flag` Int64, `line_id` Int64, `class1_id` Int64, `class2_id` Int64, `class3_id` Int64, `net_weight` Float64, `physical_count` Float64, `big_area_id` Int64, `city_id` Int64, `zhucheng_id` Int64, `zhucheng_level` Int64, `cm_area_id` Int64, `g_business_flag` Int64, `td_country_id` Int64, `td_id` Int64, `qzq_id` Int64, `c_big_area_id` Int64, `l_big_area_id` Int64, `nc_city_id` Int64, `g_satellite_big_area_id` Int64, `g_satellite_sub_area_id` Int64, `g_province_id` Int64, `g_cm_area_id` Int64, `v` Int64) ENGINE = Memory>, Ready Go !
2021-04-11 14:37:06,817 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:37:06,817 clickhouse_migrate:101 [INFO]: Fetch table schema, default.m4
2021-04-11 14:37:06,893 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.m4 (`b` UInt16, `a` UInt32 MATERIALIZED b + 1, `c` UInt16, `d` UInt16) ENGINE = ReplacingMergeTree() PARTITION BY d ORDER BY (c, b) SETTINGS index_granularity = 8192
2021-04-11 14:37:06,894 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.m4 (`b` UInt16, `a` UInt32 MATERIALIZED b + 1, `c` UInt16, `d` UInt16) ENGINE = ReplacingMergeTree() PARTITION BY d ORDER BY (c, b) SETTINGS index_granularity = 8192 
2021-04-11 14:37:06,894 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:06,894 clickhouse_migrate:38 [INFO]: table : m4
2021-04-11 14:37:06,894 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.m4 on cluster replicated_stock (`b` UInt16, `a` UInt32 MATERIALIZED b + 1, `c` UInt16, `d` UInt16) ENGINE = ReplacingMergeTree() PARTITION BY d ORDER BY (c, b) SETTINGS index_granularity = 8192 is bad
2021-04-11 14:37:06,894 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.m4 on cluster replicated_stock (`b` UInt16, `a` UInt32 MATERIALIZED b + 1, `c` UInt16, `d` UInt16) ENGINE = ReplacingMergeTree() PARTITION BY d ORDER BY (c, b) SETTINGS index_granularity = 8192
2021-04-11 14:37:06,894 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:06,894 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.m4 on cluster replicated_stock (`b` UInt16, `a` UInt32 MATERIALIZED b + 1, `c` UInt16, `d` UInt16) ENGINE = ReplacingMergeTree() PARTITION BY d ORDER BY (c, b) SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:37:07,134 clickhouse_migrate:101 [INFO]: Fetch table schema, default.m_test
2021-04-11 14:37:07,211 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.m_test (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = Distributed(stock, default, m_local_test, rand())
2021-04-11 14:37:07,212 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.m_test (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = Distributed(stock, default, m_local_test, rand()) 
2021-04-11 14:37:07,212 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:07,212 clickhouse_migrate:38 [INFO]: table : m_test
2021-04-11 14:37:07,212 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.m_test on cluster replicated_stock (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = Distributed(stock, default, m_local_test, rand())
2021-04-11 14:37:07,212 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:07,212 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.m_test on cluster replicated_stock (`name` String, `uid` Int32, `city_id` Int32, `dt` Date) ENGINE = Distributed(stock, default, m_local_test, rand())>, Ready Go !
2021-04-11 14:37:07,413 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:37:07,413 clickhouse_migrate:101 [INFO]: Fetch table schema, default.m_u
2021-04-11 14:37:07,491 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.m_u (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = Distributed(stock, default, m_u_local, rand())
2021-04-11 14:37:07,491 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.m_u (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = Distributed(stock, default, m_u_local, rand()) 
2021-04-11 14:37:07,492 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:07,492 clickhouse_migrate:38 [INFO]: table : m_u
2021-04-11 14:37:07,492 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.m_u on cluster replicated_stock (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = Distributed(stock, default, m_u_local, rand())
2021-04-11 14:37:07,492 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:07,492 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.m_u on cluster replicated_stock (`dt` Date, `company_id` Int32, `city_id` Int32, `customer_risk` Int32) ENGINE = Distributed(stock, default, m_u_local, rand())>, Ready Go !
2021-04-11 14:37:07,731 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:37:07,731 clickhouse_migrate:101 [INFO]: Fetch table schema, default.ontime_all
2021-04-11 14:37:07,808 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.ontime_all (`FlightDate` Date, `Year` UInt16) ENGINE = Distributed(stock, default, ontime_local, rand())
2021-04-11 14:37:07,808 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.ontime_all (`FlightDate` Date, `Year` UInt16) ENGINE = Distributed(stock, default, ontime_local, rand()) 
2021-04-11 14:37:07,809 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:07,809 clickhouse_migrate:38 [INFO]: table : ontime_all
2021-04-11 14:37:07,809 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.ontime_all on cluster replicated_stock (`FlightDate` Date, `Year` UInt16) ENGINE = Distributed(stock, default, ontime_local, rand())
2021-04-11 14:37:07,809 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:07,809 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.ontime_all on cluster replicated_stock (`FlightDate` Date, `Year` UInt16) ENGINE = Distributed(stock, default, ontime_local, rand())>, Ready Go !
2021-04-11 14:37:08,054 clickhouse_migrate:159 [ERROR]: Exception when executing create table <attribute 'message' of 'exceptions.BaseException' objects>
2021-04-11 14:37:08,055 clickhouse_migrate:101 [INFO]: Fetch table schema, default.result
2021-04-11 14:37:08,131 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.result (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192
2021-04-11 14:37:08,131 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.result (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192 
2021-04-11 14:37:08,131 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:08,131 clickhouse_migrate:38 [INFO]: table : result
2021-04-11 14:37:08,131 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.result on cluster replicated_stock (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192 is bad
2021-04-11 14:37:08,132 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.result on cluster replicated_stock (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192
2021-04-11 14:37:08,132 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:08,132 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.result on cluster replicated_stock (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:37:08,369 clickhouse_migrate:101 [INFO]: Fetch table schema, default.stock
2021-04-11 14:37:08,445 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.stock (`plant` Int32, `code` Int32, `service_level` Float32, `qty` Int32) ENGINE = Log
2021-04-11 14:37:08,445 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.stock (`plant` Int32, `code` Int32, `service_level` Float32, `qty` Int32) ENGINE = Log 
2021-04-11 14:37:08,445 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:08,445 clickhouse_migrate:38 [INFO]: table : stock
2021-04-11 14:37:08,446 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.stock on cluster replicated_stock (`plant` Int32, `code` Int32, `service_level` Float32, `qty` Int32) ENGINE = Log is bad
2021-04-11 14:37:08,446 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.stock on cluster replicated_stock (`plant` Int32, `code` Int32, `service_level` Float32, `qty` Int32) ENGINE = Log
2021-04-11 14:37:08,446 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:08,446 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.stock on cluster replicated_stock (`plant` Int32, `code` Int32, `service_level` Float32, `qty` Int32) ENGINE = Log>, Ready Go !
2021-04-11 14:37:08,646 clickhouse_migrate:101 [INFO]: Fetch table schema, default.stock1
2021-04-11 14:37:08,724 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.stock1 (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty') ENGINE = Log
2021-04-11 14:37:08,724 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.stock1 (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty') ENGINE = Log 
2021-04-11 14:37:08,724 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:08,724 clickhouse_migrate:38 [INFO]: table : stock1
2021-04-11 14:37:08,724 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.stock1 on cluster replicated_stock (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty') ENGINE = Log is bad
2021-04-11 14:37:08,724 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.stock1 on cluster replicated_stock (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty') ENGINE = Log
2021-04-11 14:37:08,724 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:08,724 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.stock1 on cluster replicated_stock (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty') ENGINE = Log>, Ready Go !
2021-04-11 14:37:08,924 clickhouse_migrate:101 [INFO]: Fetch table schema, default.stock2
2021-04-11 14:37:09,001 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.stock2 (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty', `q` String DEFAULT '') ENGINE = Log
2021-04-11 14:37:09,001 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.stock2 (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty', `q` String DEFAULT '') ENGINE = Log 
2021-04-11 14:37:09,002 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:09,002 clickhouse_migrate:38 [INFO]: table : stock2
2021-04-11 14:37:09,002 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.stock2 on cluster replicated_stock (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty', `q` String DEFAULT '') ENGINE = Log is bad
2021-04-11 14:37:09,002 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.stock2 on cluster replicated_stock (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty', `q` String DEFAULT '') ENGINE = Log
2021-04-11 14:37:09,002 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:09,002 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.stock2 on cluster replicated_stock (`plant` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'plant', `code` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'code', `service_level` Float32 DEFAULT CAST(0., 'Float32') COMMENT 'service_level', `qty` Int32 DEFAULT CAST(0, 'Int32') COMMENT 'qty', `q` String DEFAULT '') ENGINE = Log>, Ready Go !
2021-04-11 14:37:09,208 clickhouse_migrate:101 [INFO]: Fetch table schema, default.test1
2021-04-11 14:37:09,288 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.test1 (`a` Date, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192
2021-04-11 14:37:09,288 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.test1 (`a` Date, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192 
2021-04-11 14:37:09,288 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:09,288 clickhouse_migrate:38 [INFO]: table : test1
2021-04-11 14:37:09,288 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.test1 on cluster replicated_stock (`a` Date, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192 is bad
2021-04-11 14:37:09,288 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.test1 on cluster replicated_stock (`a` Date, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192
2021-04-11 14:37:09,289 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:09,289 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.test1 on cluster replicated_stock (`a` Date, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:37:09,488 clickhouse_migrate:101 [INFO]: Fetch table schema, default.test2
2021-04-11 14:37:09,569 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.test2 (`a` DateTime, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192
2021-04-11 14:37:09,569 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.test2 (`a` DateTime, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192 
2021-04-11 14:37:09,569 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:09,569 clickhouse_migrate:38 [INFO]: table : test2
2021-04-11 14:37:09,569 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.test2 on cluster replicated_stock (`a` DateTime, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192 is bad
2021-04-11 14:37:09,570 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.test2 on cluster replicated_stock (`a` DateTime, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192
2021-04-11 14:37:09,570 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:09,570 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.test2 on cluster replicated_stock (`a` DateTime, `b` Int32, `c` Float64, `d` Float64) ENGINE = MergeTree() PARTITION BY a ORDER BY b SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:37:09,770 clickhouse_migrate:101 [INFO]: Fetch table schema, default.test3
2021-04-11 14:37:09,848 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE default.test3 (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192
2021-04-11 14:37:09,849 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE default.test3 (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192 
2021-04-11 14:37:09,849 clickhouse_migrate:37 [INFO]: database : default
2021-04-11 14:37:09,849 clickhouse_migrate:38 [INFO]: table : test3
2021-04-11 14:37:09,849 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS default.test3 on cluster replicated_stock (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192 is bad
2021-04-11 14:37:09,849 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS default.test3 on cluster replicated_stock (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192
2021-04-11 14:37:09,849 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:09,849 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS default.test3 on cluster replicated_stock (`name` String, `channel` String, `pv` Int32) ENGINE = MergeTree() PARTITION BY channel ORDER BY channel SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:37:10,202 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : [u'dim_city_manage', u'dim_city_manage_new', u'dim_product_pms_class_sku_map', u'dim_sku']
2021-04-11 14:37:10,202 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : []
2021-04-11 14:37:10,202 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : [u'dim_city_manage', u'dim_city_manage_new', u'dim_product_pms_class_sku_map', u'dim_sku']
2021-04-11 14:37:10,202 clickhouse_migrate:131 [INFO]: local tables [] in dim
2021-04-11 14:37:10,202 clickhouse_migrate:144 [INFO]: Will Create distributed Tables in dim
2021-04-11 14:37:10,202 clickhouse_migrate:149 [INFO]: distributed tables [u'dim_city_manage', u'dim_city_manage_new', u'dim_product_pms_class_sku_map', u'dim_sku'] in dim
2021-04-11 14:37:10,202 clickhouse_migrate:101 [INFO]: Fetch table schema, dim.dim_city_manage
2021-04-11 14:37:10,280 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE dim.dim_city_manage (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = ReplacingMergeTree() PRIMARY KEY sale_area_id ORDER BY sale_area_id SETTINGS index_granularity = 8192
2021-04-11 14:37:10,280 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE dim.dim_city_manage (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = ReplacingMergeTree() PRIMARY KEY sale_area_id ORDER BY sale_area_id SETTINGS index_granularity = 8192 
2021-04-11 14:37:10,281 clickhouse_migrate:37 [INFO]: database : dim
2021-04-11 14:37:10,281 clickhouse_migrate:38 [INFO]: table : dim_city_manage
2021-04-11 14:37:10,281 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS dim.dim_city_manage on cluster replicated_stock (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = ReplacingMergeTree() PRIMARY KEY sale_area_id ORDER BY sale_area_id SETTINGS index_granularity = 8192 is bad
2021-04-11 14:37:10,281 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS dim.dim_city_manage on cluster replicated_stock (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = ReplacingMergeTree() PRIMARY KEY sale_area_id ORDER BY sale_area_id SETTINGS index_granularity = 8192
2021-04-11 14:37:10,281 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:10,281 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS dim.dim_city_manage on cluster replicated_stock (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = ReplacingMergeTree() PRIMARY KEY sale_area_id ORDER BY sale_area_id SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:37:10,482 clickhouse_migrate:101 [INFO]: Fetch table schema, dim.dim_city_manage_new
2021-04-11 14:37:10,562 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE dim.dim_city_manage_new (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = MergeTree() PARTITION BY big_area_id ORDER BY big_area_id SETTINGS index_granularity = 8192
2021-04-11 14:37:10,562 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE dim.dim_city_manage_new (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = MergeTree() PARTITION BY big_area_id ORDER BY big_area_id SETTINGS index_granularity = 8192 
2021-04-11 14:37:10,562 clickhouse_migrate:37 [INFO]: database : dim
2021-04-11 14:37:10,562 clickhouse_migrate:38 [INFO]: table : dim_city_manage_new
2021-04-11 14:37:10,563 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS dim.dim_city_manage_new on cluster replicated_stock (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = MergeTree() PARTITION BY big_area_id ORDER BY big_area_id SETTINGS index_granularity = 8192 is bad
2021-04-11 14:37:10,563 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS dim.dim_city_manage_new on cluster replicated_stock (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = MergeTree() PARTITION BY big_area_id ORDER BY big_area_id SETTINGS index_granularity = 8192
2021-04-11 14:37:10,563 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:10,563 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS dim.dim_city_manage_new on cluster replicated_stock (`country_id` Int64 COMMENT '全国id', `country_name` String COMMENT '全国名称', `big_area_id` Int64 COMMENT '大区id', `big_area_name` String COMMENT '大区名称', `zhucheng_id` Int64 COMMENT '主城id', `zhucheng_name` String COMMENT '主城名称', `cm_area_id` Int64 COMMENT 'cm区id', `cm_area_name` String COMMENT 'cm区名称', `sale_area_id` Int64 COMMENT '售卖区id', `sale_area_name` String COMMENT '售卖区名称', `cm_area_flag` Int64 COMMENT 'cm区是否卫星城(0:主城、1:卫星城)', `city_id` Int64 COMMENT '城市id', `city_name` String COMMENT '城市名称', `city_flag` Int64 COMMENT '城市类型(2:直管城市、4:合伙人城市)') ENGINE = MergeTree() PARTITION BY big_area_id ORDER BY big_area_id SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:37:10,764 clickhouse_migrate:101 [INFO]: Fetch table schema, dim.dim_product_pms_class_sku_map
2021-04-11 14:37:10,840 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE dim.dim_product_pms_class_sku_map (`id` UInt32 COMMENT '映射id(主键)', `class1_id` UInt32 COMMENT '一级分类id', `class1_name` String COMMENT '一级分类名称', `class2_id` UInt32 COMMENT '二级分类id', `class2_name` String COMMENT '二级分类名称', `class3_id` UInt32 COMMENT '三级分类id', `class3_name` String COMMENT '三级分类名称', `sku_id` UInt32 COMMENT 'sku_id', `is_deleted` UInt32 COMMENT '删除') ENGINE = MergeTree() PARTITION BY sku_id ORDER BY sku_id SETTINGS index_granularity = 8192
2021-04-11 14:37:10,840 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE dim.dim_product_pms_class_sku_map (`id` UInt32 COMMENT '映射id(主键)', `class1_id` UInt32 COMMENT '一级分类id', `class1_name` String COMMENT '一级分类名称', `class2_id` UInt32 COMMENT '二级分类id', `class2_name` String COMMENT '二级分类名称', `class3_id` UInt32 COMMENT '三级分类id', `class3_name` String COMMENT '三级分类名称', `sku_id` UInt32 COMMENT 'sku_id', `is_deleted` UInt32 COMMENT '删除') ENGINE = MergeTree() PARTITION BY sku_id ORDER BY sku_id SETTINGS index_granularity = 8192 
2021-04-11 14:37:10,840 clickhouse_migrate:37 [INFO]: database : dim
2021-04-11 14:37:10,840 clickhouse_migrate:38 [INFO]: table : dim_product_pms_class_sku_map
2021-04-11 14:37:10,840 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS dim.dim_product_pms_class_sku_map on cluster replicated_stock (`id` UInt32 COMMENT '映射id(主键)', `class1_id` UInt32 COMMENT '一级分类id', `class1_name` String COMMENT '一级分类名称', `class2_id` UInt32 COMMENT '二级分类id', `class2_name` String COMMENT '二级分类名称', `class3_id` UInt32 COMMENT '三级分类id', `class3_name` String COMMENT '三级分类名称', `sku_id` UInt32 COMMENT 'sku_id', `is_deleted` UInt32 COMMENT '删除') ENGINE = MergeTree() PARTITION BY sku_id ORDER BY sku_id SETTINGS index_granularity = 8192 is bad
2021-04-11 14:37:10,841 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS dim.dim_product_pms_class_sku_map on cluster replicated_stock (`id` UInt32 COMMENT '映射id(主键)', `class1_id` UInt32 COMMENT '一级分类id', `class1_name` String COMMENT '一级分类名称', `class2_id` UInt32 COMMENT '二级分类id', `class2_name` String COMMENT '二级分类名称', `class3_id` UInt32 COMMENT '三级分类id', `class3_name` String COMMENT '三级分类名称', `sku_id` UInt32 COMMENT 'sku_id', `is_deleted` UInt32 COMMENT '删除') ENGINE = MergeTree() PARTITION BY sku_id ORDER BY sku_id SETTINGS index_granularity = 8192
2021-04-11 14:37:10,841 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:10,841 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS dim.dim_product_pms_class_sku_map on cluster replicated_stock (`id` UInt32 COMMENT '映射id(主键)', `class1_id` UInt32 COMMENT '一级分类id', `class1_name` String COMMENT '一级分类名称', `class2_id` UInt32 COMMENT '二级分类id', `class2_name` String COMMENT '二级分类名称', `class3_id` UInt32 COMMENT '三级分类id', `class3_name` String COMMENT '三级分类名称', `sku_id` UInt32 COMMENT 'sku_id', `is_deleted` UInt32 COMMENT '删除') ENGINE = MergeTree() PARTITION BY sku_id ORDER BY sku_id SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:37:11,039 clickhouse_migrate:101 [INFO]: Fetch table schema, dim.dim_sku
2021-04-11 14:37:11,117 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE dim.dim_sku (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192
2021-04-11 14:37:11,118 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE dim.dim_sku (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192 
2021-04-11 14:37:11,118 clickhouse_migrate:37 [INFO]: database : dim
2021-04-11 14:37:11,118 clickhouse_migrate:38 [INFO]: table : dim_sku
2021-04-11 14:37:11,118 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS dim.dim_sku on cluster replicated_stock (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192 is bad
2021-04-11 14:37:11,118 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS dim.dim_sku on cluster replicated_stock (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192
2021-04-11 14:37:11,119 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:11,119 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS dim.dim_sku on cluster replicated_stock (`id` Int32 COMMENT '主键', `class1_id` Int32 COMMENT 'class1的id', `class1_name` String COMMENT 'class1的name', `class2_id` Int32 COMMENT 'class2的id', `class2_name` String COMMENT 'class2的name', `class3_id` Int32 COMMENT 'class3的id', `class3_name` String COMMENT 'class3的name', `sbu_id` Int32 COMMENT 'sbu的id', `sbu_name` String COMMENT 'sbu的name', `own_brand` String COMMENT '品牌', `bi_id` Int32 COMMENT 'bi的id', `spu_id` Int32 COMMENT 'spu的id', `sku_code` String COMMENT '产品编码', `sku_name` String COMMENT '产品名称', `status` Int32 COMMENT '状态 1 生效 0失效', `sku_format` String COMMENT '规格', `sku_desc` String COMMENT '描述', `pics` String COMMENT '产品图片', `package_pics` String COMMENT '外包装标识图片', `is_weight` Int32 COMMENT '称重为1，否则为0', `Int32 ernational_code` String COMMENT '产品国际码', `is_shelf_life` Int32 COMMENT '是否保质期管理', `is_fixed_conversion_rate` Int32 COMMENT '是否固定换算率', `physical_count` Float64 COMMENT '库存单位/计价单位 ', `physical_unit` String COMMENT '库存单位', `valuation_unit` String COMMENT '计价单位', `sku_level` String COMMENT '产品等级', `spu_count` Float64 COMMENT '包含spu数量', `min_unit` Float64 COMMENT 'spu最小单位', `c_t` Int32 COMMENT '创建时间', `u_t` Int32 COMMENT '修改时间', `is_deleted` Int32 COMMENT '是否删除：1：已删除，0：有效', `temperature` Int32 COMMENT '建议保存温层:1常温、2冷藏、3冷冻', `expire_days` Int32 COMMENT '建议保质期天数', `length` Float64 COMMENT '商品本身的尺寸(长) cm', `width` Float64 COMMENT '商品本身的尺寸(宽)cm', `height` Float64 COMMENT '商品本身的尺寸(高)cm', `volume` Float64 COMMENT '商品本身的尺寸(体积) m3', `net_weight` Float64 COMMENT '商品本身的重量(净重)斤', `gross_weight` Float64 COMMENT '商品本身的重量(毛重) 斤', `tare_weight` Float64 COMMENT '商品本身的重量(皮重)斤', `is_certificate` Int32 COMMENT '是否需要证书 1是,0否', `is_precious` Int32 COMMENT '是否贵品1是,0否', `is_fragile` Int32 COMMENT '是否易碎1是,0否', `physical_measure_unit` Int32 COMMENT '库存单位选择的计量方式id sku_units档案id', `valuation_measure_unit` Int32 COMMENT '计价单位选择的计量方式id sku_units的id', `bi_name` String COMMENT 'bi名称', `old_class2_id` Int32 COMMENT '老二级分类', `bi_alias` String COMMENT 'bi别名') ENGINE = MergeTree() PARTITION BY class1_id ORDER BY id SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:37:11,478 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : [u'DUAL', u't_main_psn_info']
2021-04-11 14:37:11,478 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : []
2021-04-11 14:37:11,478 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : [u'DUAL', u't_main_psn_info']
2021-04-11 14:37:11,479 clickhouse_migrate:131 [INFO]: local tables [] in hrdb
2021-04-11 14:37:11,479 clickhouse_migrate:144 [INFO]: Will Create distributed Tables in hrdb
2021-04-11 14:37:11,479 clickhouse_migrate:149 [INFO]: distributed tables [u'DUAL', u't_main_psn_info'] in hrdb
2021-04-11 14:37:11,479 clickhouse_migrate:101 [INFO]: Fetch table schema, hrdb.DUAL
2021-04-11 14:37:11,555 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE hrdb.DUAL (`id` UInt64) ENGINE = Memory
2021-04-11 14:37:11,555 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE hrdb.DUAL (`id` UInt64) ENGINE = Memory 
2021-04-11 14:37:11,556 clickhouse_migrate:37 [INFO]: database : hrdb
2021-04-11 14:37:11,556 clickhouse_migrate:38 [INFO]: table : DUAL
2021-04-11 14:37:11,556 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS hrdb.DUAL on cluster replicated_stock (`id` UInt64) ENGINE = Memory is bad
2021-04-11 14:37:11,556 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS hrdb.DUAL on cluster replicated_stock (`id` UInt64) ENGINE = Memory
2021-04-11 14:37:11,556 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:11,556 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS hrdb.DUAL on cluster replicated_stock (`id` UInt64) ENGINE = Memory>, Ready Go !
2021-04-11 14:37:11,825 clickhouse_migrate:101 [INFO]: Fetch table schema, hrdb.t_main_psn_info
2021-04-11 14:37:11,905 clickhouse_migrate:153 [INFO]: Table's schema CREATE TABLE hrdb.t_main_psn_info (`pk_psndoc` String, `code` Nullable(String), `name` Nullable(String), `pk_idtype` Nullable(String), `idtype` Nullable(String), `id` Nullable(String), `sex` Nullable(Int32), `pk_nationality` Nullable(String), `nationality` Nullable(String), `pk_nativeplace` Nullable(String), `nativeplace` Nullable(String), `pk_characterrpr` Nullable(String), `characterrpr` Nullable(String), `pk_marital` Nullable(String), `marital` Nullable(String), `pk_polity` Nullable(String), `polity` Nullable(String), `email` Nullable(String), `mobile` Nullable(String), `pk_org` Nullable(String), `org` Nullable(String), `org_short` Nullable(String), `org_code` Nullable(String), `pk_dispatch_corp` Nullable(String), `dispatch_corp` Nullable(String), `pk_contract_corp` Nullable(String), `contract_corp` Nullable(String), `pk_dept` Nullable(String), `dept` Nullable(String), `dept_code` Nullable(String), `dept_path` Nullable(String), `pk_post` Nullable(String), `post` Nullable(String), `post_code` Nullable(String), `pk_work_city` Nullable(String), `work_city` Nullable(String), `pk_work_address` Nullable(String), `work_address` Nullable(String), `pk_psn_class` Nullable(String), `psn_class` Nullable(String), `pk_mng_rank` Nullable(String), `mng_rank` Nullable(String), `pk_nmng_rank` Nullable(String), `nmng_rank` Nullable(String), `pk_salary_card_pro` Nullable(String), `salary_card_pro` Nullable(String), `pk_salary_card_city` Nullable(String), `salary_card_city` Nullable(String), `pk_bank_type` Nullable(String), `bank_type` Nullable(String), `pk_bank` Nullable(String), `bank` Nullable(String), `bank_number` Nullable(String), `first_join_date` Nullable(Date), `last_join_date` Date, `last_begin_date` Nullable(Date), `regular_date` Nullable(Date), `trail_result` Nullable(Int32), `psn_status` Nullable(Int32), `email_prefix` Nullable(String), `sign_date` Nullable(Date), `dimission_date` Nullable(Date), `post_level` Nullable(String), `pk_doc_address` Nullable(String), `doc_address` Nullable(String), `pk_social_sec` Nullable(String), `social_sec` Nullable(String), `personal_email` Nullable(String), `has_trial` Nullable(String), `pk_psn_rank` Nullable(String), `psn_rank` Nullable(String), `ctrt_begin_date` Nullable(Date), `join_work_date` Nullable(Date)) ENGINE = MergeTree ORDER BY pk_psndoc SETTINGS index_granularity = 8192
2021-04-11 14:37:11,906 clickhouse_migrate:36 [INFO]: table_schema :CREATE TABLE hrdb.t_main_psn_info (`pk_psndoc` String, `code` Nullable(String), `name` Nullable(String), `pk_idtype` Nullable(String), `idtype` Nullable(String), `id` Nullable(String), `sex` Nullable(Int32), `pk_nationality` Nullable(String), `nationality` Nullable(String), `pk_nativeplace` Nullable(String), `nativeplace` Nullable(String), `pk_characterrpr` Nullable(String), `characterrpr` Nullable(String), `pk_marital` Nullable(String), `marital` Nullable(String), `pk_polity` Nullable(String), `polity` Nullable(String), `email` Nullable(String), `mobile` Nullable(String), `pk_org` Nullable(String), `org` Nullable(String), `org_short` Nullable(String), `org_code` Nullable(String), `pk_dispatch_corp` Nullable(String), `dispatch_corp` Nullable(String), `pk_contract_corp` Nullable(String), `contract_corp` Nullable(String), `pk_dept` Nullable(String), `dept` Nullable(String), `dept_code` Nullable(String), `dept_path` Nullable(String), `pk_post` Nullable(String), `post` Nullable(String), `post_code` Nullable(String), `pk_work_city` Nullable(String), `work_city` Nullable(String), `pk_work_address` Nullable(String), `work_address` Nullable(String), `pk_psn_class` Nullable(String), `psn_class` Nullable(String), `pk_mng_rank` Nullable(String), `mng_rank` Nullable(String), `pk_nmng_rank` Nullable(String), `nmng_rank` Nullable(String), `pk_salary_card_pro` Nullable(String), `salary_card_pro` Nullable(String), `pk_salary_card_city` Nullable(String), `salary_card_city` Nullable(String), `pk_bank_type` Nullable(String), `bank_type` Nullable(String), `pk_bank` Nullable(String), `bank` Nullable(String), `bank_number` Nullable(String), `first_join_date` Nullable(Date), `last_join_date` Date, `last_begin_date` Nullable(Date), `regular_date` Nullable(Date), `trail_result` Nullable(Int32), `psn_status` Nullable(Int32), `email_prefix` Nullable(String), `sign_date` Nullable(Date), `dimission_date` Nullable(Date), `post_level` Nullable(String), `pk_doc_address` Nullable(String), `doc_address` Nullable(String), `pk_social_sec` Nullable(String), `social_sec` Nullable(String), `personal_email` Nullable(String), `has_trial` Nullable(String), `pk_psn_rank` Nullable(String), `psn_rank` Nullable(String), `ctrt_begin_date` Nullable(Date), `join_work_date` Nullable(Date)) ENGINE = MergeTree ORDER BY pk_psndoc SETTINGS index_granularity = 8192 
2021-04-11 14:37:11,906 clickhouse_migrate:37 [INFO]: database : hrdb
2021-04-11 14:37:11,906 clickhouse_migrate:38 [INFO]: table : t_main_psn_info
2021-04-11 14:37:11,906 clickhouse_migrate:49 [ERROR]: table_schema CREATE TABLE IF NOT EXISTS hrdb.t_main_psn_info on cluster replicated_stock (`pk_psndoc` String, `code` Nullable(String), `name` Nullable(String), `pk_idtype` Nullable(String), `idtype` Nullable(String), `id` Nullable(String), `sex` Nullable(Int32), `pk_nationality` Nullable(String), `nationality` Nullable(String), `pk_nativeplace` Nullable(String), `nativeplace` Nullable(String), `pk_characterrpr` Nullable(String), `characterrpr` Nullable(String), `pk_marital` Nullable(String), `marital` Nullable(String), `pk_polity` Nullable(String), `polity` Nullable(String), `email` Nullable(String), `mobile` Nullable(String), `pk_org` Nullable(String), `org` Nullable(String), `org_short` Nullable(String), `org_code` Nullable(String), `pk_dispatch_corp` Nullable(String), `dispatch_corp` Nullable(String), `pk_contract_corp` Nullable(String), `contract_corp` Nullable(String), `pk_dept` Nullable(String), `dept` Nullable(String), `dept_code` Nullable(String), `dept_path` Nullable(String), `pk_post` Nullable(String), `post` Nullable(String), `post_code` Nullable(String), `pk_work_city` Nullable(String), `work_city` Nullable(String), `pk_work_address` Nullable(String), `work_address` Nullable(String), `pk_psn_class` Nullable(String), `psn_class` Nullable(String), `pk_mng_rank` Nullable(String), `mng_rank` Nullable(String), `pk_nmng_rank` Nullable(String), `nmng_rank` Nullable(String), `pk_salary_card_pro` Nullable(String), `salary_card_pro` Nullable(String), `pk_salary_card_city` Nullable(String), `salary_card_city` Nullable(String), `pk_bank_type` Nullable(String), `bank_type` Nullable(String), `pk_bank` Nullable(String), `bank` Nullable(String), `bank_number` Nullable(String), `first_join_date` Nullable(Date), `last_join_date` Date, `last_begin_date` Nullable(Date), `regular_date` Nullable(Date), `trail_result` Nullable(Int32), `psn_status` Nullable(Int32), `email_prefix` Nullable(String), `sign_date` Nullable(Date), `dimission_date` Nullable(Date), `post_level` Nullable(String), `pk_doc_address` Nullable(String), `doc_address` Nullable(String), `pk_social_sec` Nullable(String), `social_sec` Nullable(String), `personal_email` Nullable(String), `has_trial` Nullable(String), `pk_psn_rank` Nullable(String), `psn_rank` Nullable(String), `ctrt_begin_date` Nullable(Date), `join_work_date` Nullable(Date)) ENGINE = MergeTree ORDER BY pk_psndoc SETTINGS index_granularity = 8192 is bad
2021-04-11 14:37:11,906 clickhouse_migrate:58 [INFO]: Target target_schema CREATE TABLE IF NOT EXISTS hrdb.t_main_psn_info on cluster replicated_stock (`pk_psndoc` String, `code` Nullable(String), `name` Nullable(String), `pk_idtype` Nullable(String), `idtype` Nullable(String), `id` Nullable(String), `sex` Nullable(Int32), `pk_nationality` Nullable(String), `nationality` Nullable(String), `pk_nativeplace` Nullable(String), `nativeplace` Nullable(String), `pk_characterrpr` Nullable(String), `characterrpr` Nullable(String), `pk_marital` Nullable(String), `marital` Nullable(String), `pk_polity` Nullable(String), `polity` Nullable(String), `email` Nullable(String), `mobile` Nullable(String), `pk_org` Nullable(String), `org` Nullable(String), `org_short` Nullable(String), `org_code` Nullable(String), `pk_dispatch_corp` Nullable(String), `dispatch_corp` Nullable(String), `pk_contract_corp` Nullable(String), `contract_corp` Nullable(String), `pk_dept` Nullable(String), `dept` Nullable(String), `dept_code` Nullable(String), `dept_path` Nullable(String), `pk_post` Nullable(String), `post` Nullable(String), `post_code` Nullable(String), `pk_work_city` Nullable(String), `work_city` Nullable(String), `pk_work_address` Nullable(String), `work_address` Nullable(String), `pk_psn_class` Nullable(String), `psn_class` Nullable(String), `pk_mng_rank` Nullable(String), `mng_rank` Nullable(String), `pk_nmng_rank` Nullable(String), `nmng_rank` Nullable(String), `pk_salary_card_pro` Nullable(String), `salary_card_pro` Nullable(String), `pk_salary_card_city` Nullable(String), `salary_card_city` Nullable(String), `pk_bank_type` Nullable(String), `bank_type` Nullable(String), `pk_bank` Nullable(String), `bank` Nullable(String), `bank_number` Nullable(String), `first_join_date` Nullable(Date), `last_join_date` Date, `last_begin_date` Nullable(Date), `regular_date` Nullable(Date), `trail_result` Nullable(Int32), `psn_status` Nullable(Int32), `email_prefix` Nullable(String), `sign_date` Nullable(Date), `dimission_date` Nullable(Date), `post_level` Nullable(String), `pk_doc_address` Nullable(String), `doc_address` Nullable(String), `pk_social_sec` Nullable(String), `social_sec` Nullable(String), `personal_email` Nullable(String), `has_trial` Nullable(String), `pk_psn_rank` Nullable(String), `psn_rank` Nullable(String), `ctrt_begin_date` Nullable(Date), `join_work_date` Nullable(Date)) ENGINE = MergeTree ORDER BY pk_psndoc SETTINGS index_granularity = 8192
2021-04-11 14:37:11,906 clickhouse_migrate:156 [INFO]: Will construct table on target cluster
2021-04-11 14:37:11,907 clickhouse_migrate:111 [INFO]: Create table <table schema CREATE TABLE IF NOT EXISTS hrdb.t_main_psn_info on cluster replicated_stock (`pk_psndoc` String, `code` Nullable(String), `name` Nullable(String), `pk_idtype` Nullable(String), `idtype` Nullable(String), `id` Nullable(String), `sex` Nullable(Int32), `pk_nationality` Nullable(String), `nationality` Nullable(String), `pk_nativeplace` Nullable(String), `nativeplace` Nullable(String), `pk_characterrpr` Nullable(String), `characterrpr` Nullable(String), `pk_marital` Nullable(String), `marital` Nullable(String), `pk_polity` Nullable(String), `polity` Nullable(String), `email` Nullable(String), `mobile` Nullable(String), `pk_org` Nullable(String), `org` Nullable(String), `org_short` Nullable(String), `org_code` Nullable(String), `pk_dispatch_corp` Nullable(String), `dispatch_corp` Nullable(String), `pk_contract_corp` Nullable(String), `contract_corp` Nullable(String), `pk_dept` Nullable(String), `dept` Nullable(String), `dept_code` Nullable(String), `dept_path` Nullable(String), `pk_post` Nullable(String), `post` Nullable(String), `post_code` Nullable(String), `pk_work_city` Nullable(String), `work_city` Nullable(String), `pk_work_address` Nullable(String), `work_address` Nullable(String), `pk_psn_class` Nullable(String), `psn_class` Nullable(String), `pk_mng_rank` Nullable(String), `mng_rank` Nullable(String), `pk_nmng_rank` Nullable(String), `nmng_rank` Nullable(String), `pk_salary_card_pro` Nullable(String), `salary_card_pro` Nullable(String), `pk_salary_card_city` Nullable(String), `salary_card_city` Nullable(String), `pk_bank_type` Nullable(String), `bank_type` Nullable(String), `pk_bank` Nullable(String), `bank` Nullable(String), `bank_number` Nullable(String), `first_join_date` Nullable(Date), `last_join_date` Date, `last_begin_date` Nullable(Date), `regular_date` Nullable(Date), `trail_result` Nullable(Int32), `psn_status` Nullable(Int32), `email_prefix` Nullable(String), `sign_date` Nullable(Date), `dimission_date` Nullable(Date), `post_level` Nullable(String), `pk_doc_address` Nullable(String), `doc_address` Nullable(String), `pk_social_sec` Nullable(String), `social_sec` Nullable(String), `personal_email` Nullable(String), `has_trial` Nullable(String), `pk_psn_rank` Nullable(String), `psn_rank` Nullable(String), `ctrt_begin_date` Nullable(Date), `join_work_date` Nullable(Date)) ENGINE = MergeTree ORDER BY pk_psndoc SETTINGS index_granularity = 8192>, Ready Go !
2021-04-11 14:37:12,307 clickhouse_migrate:92 [INFO]: cls.table_list after get_rid_of_tuple_in_list method : [u'.inner.aggregatingmergetree_view', u'.inner.dws_activity_oi_ts_local_v1_view', u'.inner.dws_activity_oi_ts_test_view', u'.inner.dws_activity_oi_ts_view_v2', u'activity_order', u'activity_order_local', u'aggregatingmergetree_view', u'company_recharge_detail', u'coupon_trigger', u'coupon_trigger_local', u'dws_activity_oi_ts', u'dws_activity_oi_ts_local_v1_view', u'dws_activity_oi_ts_local_v2', u'dws_activity_oi_ts_test_view', u'dws_activity_oi_ts_v1', u'dws_activity_oi_ts_v1_view', u'dws_activity_oi_ts_v2', u'dws_activity_oi_ts_v2_local', u'dws_activity_oi_ts_view_v2', u'm4_all', u'marketing_activity', u'marketing_activity_local']
2021-04-11 14:37:12,307 clickhouse_migrate:94 [INFO]: cls.local_table_list after filter method : [u'.inner.dws_activity_oi_ts_local_v1_view', u'activity_order_local', u'coupon_trigger_local', u'dws_activity_oi_ts_local_v1_view', u'dws_activity_oi_ts_local_v2', u'dws_activity_oi_ts_v2_local', u'marketing_activity_local']
2021-04-11 14:37:12,307 clickhouse_migrate:96 [INFO]: cls.no_local_table_list after filter method : [u'.inner.aggregatingmergetree_view', u'.inner.dws_activity_oi_ts_test_view', u'.inner.dws_activity_oi_ts_view_v2', u'activity_order', u'aggregatingmergetree_view', u'company_recharge_detail', u'coupon_trigger', u'dws_activity_oi_ts', u'dws_activity_oi_ts_test_view', u'dws_activity_oi_ts_v1', u'dws_activity_oi_ts_v1_view', u'dws_activity_oi_ts_v2', u'dws_activity_oi_ts_view_v2', u'm4_all', u'marketing_activity']
2021-04-11 14:37:12,307 clickhouse_migrate:131 [INFO]: local tables [u'.inner.dws_activity_oi_ts_local_v1_view', u'activity_order_local', u'coupon_trigger_local', u'dws_activity_oi_ts_local_v1_view', u'dws_activity_oi_ts_local_v2', u'dws_activity_oi_ts_v2_local', u'marketing_activity_local'] in msc
2021-04-11 14:37:12,307 clickhouse_migrate:101 [INFO]: Fetch table schema, msc..inner.dws_activity_oi_ts_local_v1_view
